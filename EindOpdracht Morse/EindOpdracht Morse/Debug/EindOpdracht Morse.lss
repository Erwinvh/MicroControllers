
EindOpdracht Morse.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001c4  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000e4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000048  00000000  00000000  000001f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000b73  00000000  00000000  0000023b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000819  00000000  00000000  00000dae  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002ee  00000000  00000000  000015c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000b4  00000000  00000000  000018b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000027d  00000000  00000000  0000196c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000015a  00000000  00000000  00001be9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000038  00000000  00000000  00001d43  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  0000016c  0000016c  000001c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001d7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.__vector_1 0000001c  000000e4  000000e4  00000138  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.__vector_2 0000001c  00000100  00000100  00000154  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.__vector_3 0000001c  0000011c  0000011c  00000170  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__vector_4 0000001c  00000138  00000138  0000018c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.main    00000018  00000154  00000154  000001a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 72 00 	jmp	0xe4	; 0xe4 <_etext>
   8:	0c 94 80 00 	jmp	0x100	; 0x100 <__vector_2>
   c:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__vector_3>
  10:	0c 94 9c 00 	jmp	0x138	; 0x138 <__vector_4>
  14:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  18:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  1c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  20:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  24:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  28:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  2c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  30:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  34:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  38:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  3c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  40:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  44:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  48:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  4c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  50:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  54:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  58:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  5c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  60:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  64:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  68:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  6c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  70:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  74:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  78:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  7c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  80:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  84:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  88:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	ec e8       	ldi	r30, 0x8C	; 140
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	40 e0       	ldi	r20, 0x00	; 0
  9e:	19 c0       	rjmp	.+50     	; 0xd2 <__do_clear_bss+0x8>
  a0:	b7 91       	elpm	r27, Z+
  a2:	a7 91       	elpm	r26, Z+
  a4:	37 91       	elpm	r19, Z+
  a6:	27 91       	elpm	r18, Z+
  a8:	07 91       	elpm	r16, Z+
  aa:	07 fd       	sbrc	r16, 7
  ac:	0e c0       	rjmp	.+28     	; 0xca <__do_clear_bss>
  ae:	97 91       	elpm	r25, Z+
  b0:	87 91       	elpm	r24, Z+
  b2:	ef 01       	movw	r28, r30
  b4:	f9 2f       	mov	r31, r25
  b6:	e8 2f       	mov	r30, r24
  b8:	0b bf       	out	0x3b, r16	; 59
  ba:	07 90       	elpm	r0, Z+
  bc:	0d 92       	st	X+, r0
  be:	a2 17       	cp	r26, r18
  c0:	b3 07       	cpc	r27, r19
  c2:	d9 f7       	brne	.-10     	; 0xba <__do_copy_data+0x22>
  c4:	fe 01       	movw	r30, r28
  c6:	1b be       	out	0x3b, r1	; 59
  c8:	04 c0       	rjmp	.+8      	; 0xd2 <__do_clear_bss+0x8>

000000ca <__do_clear_bss>:
  ca:	1d 92       	st	X+, r1
  cc:	a2 17       	cp	r26, r18
  ce:	b3 07       	cpc	r27, r19
  d0:	e1 f7       	brne	.-8      	; 0xca <__do_clear_bss>
  d2:	ec 38       	cpi	r30, 0x8C	; 140
  d4:	f4 07       	cpc	r31, r20
  d6:	21 f7       	brne	.-56     	; 0xa0 <__do_copy_data+0x8>
  d8:	0e 94 aa 00 	call	0x154	; 0x154 <main>
  dc:	0c 94 70 00 	jmp	0xe0	; 0xe0 <_exit>

000000e0 <_exit>:
  e0:	f8 94       	cli

000000e2 <__stop_program>:
  e2:	ff cf       	rjmp	.-2      	; 0xe2 <__stop_program>

Disassembly of section .text:

0000016c <__bad_interrupt>:
 16c:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.__vector_1:

000000e4 <__vector_1>:
	for (int i=0; i<ms; i++) {
		_delay_ms( 1 );		// library function (max 30 ms at 8MHz)
	}
}

ISR( INT0_vect ) {
  e4:	1f 92       	push	r1
  e6:	0f 92       	push	r0
  e8:	0f b6       	in	r0, 0x3f	; 63
  ea:	0f 92       	push	r0
  ec:	11 24       	eor	r1, r1
  ee:	8f 93       	push	r24
	// hier de code
	// bij overgang0 ?1
	// op PORTD.0
	PORTD = 0x10;
  f0:	80 e1       	ldi	r24, 0x10	; 16
  f2:	82 bb       	out	0x12, r24	; 18
}
  f4:	8f 91       	pop	r24
  f6:	0f 90       	pop	r0
  f8:	0f be       	out	0x3f, r0	; 63
  fa:	0f 90       	pop	r0
  fc:	1f 90       	pop	r1
  fe:	18 95       	reti

Disassembly of section .text.__vector_2:

00000100 <__vector_2>:

ISR( INT1_vect ) {
 100:	1f 92       	push	r1
 102:	0f 92       	push	r0
 104:	0f b6       	in	r0, 0x3f	; 63
 106:	0f 92       	push	r0
 108:	11 24       	eor	r1, r1
 10a:	8f 93       	push	r24
	// hier de code
	// bij overgang0 ?1
	// op PORTD.1
	PORTD = 0x20;
 10c:	80 e2       	ldi	r24, 0x20	; 32
 10e:	82 bb       	out	0x12, r24	; 18
}
 110:	8f 91       	pop	r24
 112:	0f 90       	pop	r0
 114:	0f be       	out	0x3f, r0	; 63
 116:	0f 90       	pop	r0
 118:	1f 90       	pop	r1
 11a:	18 95       	reti

Disassembly of section .text.__vector_3:

0000011c <__vector_3>:

ISR( INT2_vect ) {
 11c:	1f 92       	push	r1
 11e:	0f 92       	push	r0
 120:	0f b6       	in	r0, 0x3f	; 63
 122:	0f 92       	push	r0
 124:	11 24       	eor	r1, r1
 126:	8f 93       	push	r24
	// hier de code
	// bij overgang0 ?1
	// op PORTD.2
	PORTD = 0x40;
 128:	80 e4       	ldi	r24, 0x40	; 64
 12a:	82 bb       	out	0x12, r24	; 18
}
 12c:	8f 91       	pop	r24
 12e:	0f 90       	pop	r0
 130:	0f be       	out	0x3f, r0	; 63
 132:	0f 90       	pop	r0
 134:	1f 90       	pop	r1
 136:	18 95       	reti

Disassembly of section .text.__vector_4:

00000138 <__vector_4>:

ISR( INT3_vect ) {
 138:	1f 92       	push	r1
 13a:	0f 92       	push	r0
 13c:	0f b6       	in	r0, 0x3f	; 63
 13e:	0f 92       	push	r0
 140:	11 24       	eor	r1, r1
 142:	8f 93       	push	r24
	// hier de code
	// bij overgang0 ?1
	// op PORTD.3
	PORTD = 0x80;
 144:	80 e8       	ldi	r24, 0x80	; 128
 146:	82 bb       	out	0x12, r24	; 18
}
 148:	8f 91       	pop	r24
 14a:	0f 90       	pop	r0
 14c:	0f be       	out	0x3f, r0	; 63
 14e:	0f 90       	pop	r0
 150:	1f 90       	pop	r1
 152:	18 95       	reti

Disassembly of section .text.main:

00000154 <main>:


int main(void)
{
	DDRD = 0xF0;
 154:	80 ef       	ldi	r24, 0xF0	; 240
 156:	81 bb       	out	0x11, r24	; 17
	EICRA |= 0xFF;
 158:	ea e6       	ldi	r30, 0x6A	; 106
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	80 81       	ld	r24, Z
 15e:	8f ef       	ldi	r24, 0xFF	; 255
 160:	80 83       	st	Z, r24
	EIMSK |= 0x0F;
 162:	89 b7       	in	r24, 0x39	; 57
 164:	8f 60       	ori	r24, 0x0F	; 15
 166:	89 bf       	out	0x39, r24	; 57
	sei();	
 168:	78 94       	sei
 16a:	ff cf       	rjmp	.-2      	; 0x16a <main+0x16>
