
B5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000230  000002a4  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000ec  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000058  00000000  00000000  000002d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000dd0  00000000  00000000  0000032b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000008a4  00000000  00000000  000010fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000438  00000000  00000000  0000199f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000d0  00000000  00000000  00001dd8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000027d  00000000  00000000  00001ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000002e6  00000000  00000000  00002125  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  0000240b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  00000220  00000220  00000294  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002454  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.lcd_strobe_lcd_e 00000026  000001dc  000001dc  00000250  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.init    0000003e  0000013a  0000013a  000001ae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.lcd_write_data 00000036  00000178  00000178  000001ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.lcd_write_string 0000002e  000001ae  000001ae  00000222  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.lcd_clear 0000001e  00000202  00000202  00000276  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .rodata       0000000c  00800100  00000224  00000298  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 19 .text.main    0000004e  000000ec  000000ec  00000160  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
   4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
   8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
   c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  10:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  14:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  18:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  1c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  20:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  24:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  28:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  2c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  30:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  34:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  38:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  3c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  40:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  44:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  48:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  4c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  50:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  54:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  58:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  5c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  60:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  64:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  68:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  6c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  70:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  74:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  78:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  7c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  80:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  84:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  88:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>

0000008c <.dinit>:
  8c:	01 00       	.word	0x0001	; ????
  8e:	01 0c       	add	r0, r1
  90:	00 02       	muls	r16, r16
  92:	24 00       	.word	0x0024	; ????

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
  a0:	ec e8       	ldi	r30, 0x8C	; 140
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	40 e0       	ldi	r20, 0x00	; 0
  a6:	19 c0       	rjmp	.+50     	; 0xda <__do_clear_bss+0x8>
  a8:	b7 91       	elpm	r27, Z+
  aa:	a7 91       	elpm	r26, Z+
  ac:	37 91       	elpm	r19, Z+
  ae:	27 91       	elpm	r18, Z+
  b0:	07 91       	elpm	r16, Z+
  b2:	07 fd       	sbrc	r16, 7
  b4:	0e c0       	rjmp	.+28     	; 0xd2 <__do_clear_bss>
  b6:	97 91       	elpm	r25, Z+
  b8:	87 91       	elpm	r24, Z+
  ba:	ef 01       	movw	r28, r30
  bc:	f9 2f       	mov	r31, r25
  be:	e8 2f       	mov	r30, r24
  c0:	0b bf       	out	0x3b, r16	; 59
  c2:	07 90       	elpm	r0, Z+
  c4:	0d 92       	st	X+, r0
  c6:	a2 17       	cp	r26, r18
  c8:	b3 07       	cpc	r27, r19
  ca:	d9 f7       	brne	.-10     	; 0xc2 <__do_copy_data+0x22>
  cc:	fe 01       	movw	r30, r28
  ce:	1b be       	out	0x3b, r1	; 59
  d0:	04 c0       	rjmp	.+8      	; 0xda <__do_clear_bss+0x8>

000000d2 <__do_clear_bss>:
  d2:	1d 92       	st	X+, r1
  d4:	a2 17       	cp	r26, r18
  d6:	b3 07       	cpc	r27, r19
  d8:	e1 f7       	brne	.-8      	; 0xd2 <__do_clear_bss>
  da:	e3 39       	cpi	r30, 0x93	; 147
  dc:	f4 07       	cpc	r31, r20
  de:	21 f7       	brne	.-56     	; 0xa8 <__do_copy_data+0x8>
  e0:	0e 94 76 00 	call	0xec	; 0xec <_etext>
  e4:	0c 94 74 00 	jmp	0xe8	; 0xe8 <_exit>

000000e8 <_exit>:
  e8:	f8 94       	cli

000000ea <__stop_program>:
  ea:	ff cf       	rjmp	.-2      	; 0xea <__stop_program>

Disassembly of section .text:

00000220 <__bad_interrupt>:
 220:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.lcd_strobe_lcd_e:

000001dc <lcd_strobe_lcd_e>:
	

}

void lcd_strobe_lcd_e(void) {
	PORTC |= (1<<LCD_E);	// E high
 1dc:	85 b3       	in	r24, 0x15	; 21
 1de:	88 60       	ori	r24, 0x08	; 8
 1e0:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1e2:	8f ec       	ldi	r24, 0xCF	; 207
 1e4:	97 e0       	ldi	r25, 0x07	; 7
 1e6:	01 97       	sbiw	r24, 0x01	; 1
 1e8:	f1 f7       	brne	.-4      	; 0x1e6 <lcd_strobe_lcd_e+0xa>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <lcd_strobe_lcd_e+0x10>
 1ec:	00 00       	nop
	_delay_ms(1);			// nodig
	PORTC &= ~(1<<LCD_E);  	// E low
 1ee:	85 b3       	in	r24, 0x15	; 21
 1f0:	87 7f       	andi	r24, 0xF7	; 247
 1f2:	85 bb       	out	0x15, r24	; 21
 1f4:	8f ec       	ldi	r24, 0xCF	; 207
 1f6:	97 e0       	ldi	r25, 0x07	; 7
 1f8:	01 97       	sbiw	r24, 0x01	; 1
 1fa:	f1 f7       	brne	.-4      	; 0x1f8 <lcd_strobe_lcd_e+0x1c>
 1fc:	00 c0       	rjmp	.+0      	; 0x1fe <lcd_strobe_lcd_e+0x22>
 1fe:	00 00       	nop
 200:	08 95       	ret

Disassembly of section .text.init:

0000013a <init>:
/*Busy wait number of millisecs*/
void wait( int ms ) {
	for (int i=0; i<ms; i++) {
		_delay_ms( 1 );		// library function (max 30 ms at 8MHz)
	}
}
 13a:	cf 93       	push	r28
 13c:	8f ef       	ldi	r24, 0xFF	; 255
 13e:	84 bb       	out	0x14, r24	; 20
 140:	15 ba       	out	0x15, r1	; 21
 142:	c0 e2       	ldi	r28, 0x20	; 32
 144:	c5 bb       	out	0x15, r28	; 21
 146:	0e 94 ee 00 	call	0x1dc	; 0x1dc <lcd_strobe_lcd_e>
 14a:	c5 bb       	out	0x15, r28	; 21
 14c:	0e 94 ee 00 	call	0x1dc	; 0x1dc <lcd_strobe_lcd_e>
 150:	80 e8       	ldi	r24, 0x80	; 128
 152:	85 bb       	out	0x15, r24	; 21
 154:	0e 94 ee 00 	call	0x1dc	; 0x1dc <lcd_strobe_lcd_e>
 158:	15 ba       	out	0x15, r1	; 21
 15a:	0e 94 ee 00 	call	0x1dc	; 0x1dc <lcd_strobe_lcd_e>
 15e:	80 ef       	ldi	r24, 0xF0	; 240
 160:	85 bb       	out	0x15, r24	; 21
 162:	0e 94 ee 00 	call	0x1dc	; 0x1dc <lcd_strobe_lcd_e>
 166:	15 ba       	out	0x15, r1	; 21
 168:	0e 94 ee 00 	call	0x1dc	; 0x1dc <lcd_strobe_lcd_e>
 16c:	80 e6       	ldi	r24, 0x60	; 96
 16e:	85 bb       	out	0x15, r24	; 21
 170:	0e 94 ee 00 	call	0x1dc	; 0x1dc <lcd_strobe_lcd_e>
 174:	cf 91       	pop	r28
 176:	08 95       	ret

Disassembly of section .text.lcd_write_data:

00000178 <lcd_write_data>:
 178:	cf 93       	push	r28
 17a:	c8 2f       	mov	r28, r24
 17c:	85 bb       	out	0x15, r24	; 21
 17e:	85 b3       	in	r24, 0x15	; 21
 180:	84 60       	ori	r24, 0x04	; 4
 182:	85 bb       	out	0x15, r24	; 21
 184:	0e 94 ee 00 	call	0x1dc	; 0x1dc <lcd_strobe_lcd_e>
 188:	c2 95       	swap	r28
 18a:	c0 7f       	andi	r28, 0xF0	; 240
 18c:	c5 bb       	out	0x15, r28	; 21
 18e:	85 b3       	in	r24, 0x15	; 21
 190:	84 60       	ori	r24, 0x04	; 4
 192:	85 bb       	out	0x15, r24	; 21
 194:	0e 94 ee 00 	call	0x1dc	; 0x1dc <lcd_strobe_lcd_e>
 198:	2f e7       	ldi	r18, 0x7F	; 127
 19a:	88 e3       	ldi	r24, 0x38	; 56
 19c:	91 e0       	ldi	r25, 0x01	; 1
 19e:	21 50       	subi	r18, 0x01	; 1
 1a0:	80 40       	sbci	r24, 0x00	; 0
 1a2:	90 40       	sbci	r25, 0x00	; 0
 1a4:	e1 f7       	brne	.-8      	; 0x19e <lcd_write_data+0x26>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <lcd_write_data+0x30>
 1a8:	00 00       	nop
 1aa:	cf 91       	pop	r28
 1ac:	08 95       	ret

Disassembly of section .text.lcd_write_string:

000001ae <lcd_write_string>:
 1ae:	0f 93       	push	r16
 1b0:	1f 93       	push	r17
 1b2:	cf 93       	push	r28
 1b4:	df 93       	push	r29
 1b6:	8c 01       	movw	r16, r24
 1b8:	c0 e0       	ldi	r28, 0x00	; 0
 1ba:	d0 e0       	ldi	r29, 0x00	; 0
 1bc:	07 c0       	rjmp	.+14     	; 0x1cc <lcd_write_string+0x1e>
 1be:	f8 01       	movw	r30, r16
 1c0:	ec 0f       	add	r30, r28
 1c2:	fd 1f       	adc	r31, r29
 1c4:	80 81       	ld	r24, Z
 1c6:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_write_data>
 1ca:	21 96       	adiw	r28, 0x01	; 1
 1cc:	cc 30       	cpi	r28, 0x0C	; 12
 1ce:	d1 05       	cpc	r29, r1
 1d0:	b4 f3       	brlt	.-20     	; 0x1be <lcd_write_string+0x10>
 1d2:	df 91       	pop	r29
 1d4:	cf 91       	pop	r28
 1d6:	1f 91       	pop	r17
 1d8:	0f 91       	pop	r16
 1da:	08 95       	ret

Disassembly of section .text.lcd_clear:

00000202 <lcd_clear>:
	//	lcd_write_data(*str);
	//}
}

void lcd_clear() {
	PORTC = 0x00;   // Entry mode set
 202:	15 ba       	out	0x15, r1	; 21
	lcd_strobe_lcd_e();
 204:	0e 94 ee 00 	call	0x1dc	; 0x1dc <lcd_strobe_lcd_e>
	PORTC = 0x01;
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
 20c:	0e 94 ee 00 	call	0x1dc	; 0x1dc <lcd_strobe_lcd_e>
		PORTC = 0x00;   // Entry mode set
 210:	15 ba       	out	0x15, r1	; 21
		lcd_strobe_lcd_e();
 212:	0e 94 ee 00 	call	0x1dc	; 0x1dc <lcd_strobe_lcd_e>
		PORTC = 0x02;
 216:	82 e0       	ldi	r24, 0x02	; 2
 218:	85 bb       	out	0x15, r24	; 21
		lcd_strobe_lcd_e();
 21a:	0e 94 ee 00 	call	0x1dc	; 0x1dc <lcd_strobe_lcd_e>
 21e:	08 95       	ret

Disassembly of section .text.main:

000000ec <main>:
/*Busy wait number of millisecs*/
void wait( int ms ) {
	for (int i=0; i<ms; i++) {
		_delay_ms( 1 );		// library function (max 30 ms at 8MHz)
	}
}
  ec:	cf 93       	push	r28
  ee:	df 93       	push	r29
  f0:	cd b7       	in	r28, 0x3d	; 61
  f2:	de b7       	in	r29, 0x3e	; 62
  f4:	2c 97       	sbiw	r28, 0x0c	; 12
  f6:	0f b6       	in	r0, 0x3f	; 63
  f8:	f8 94       	cli
  fa:	de bf       	out	0x3e, r29	; 62
  fc:	0f be       	out	0x3f, r0	; 63
  fe:	cd bf       	out	0x3d, r28	; 61
 100:	8c e0       	ldi	r24, 0x0C	; 12
 102:	e0 e0       	ldi	r30, 0x00	; 0
 104:	f1 e0       	ldi	r31, 0x01	; 1
 106:	de 01       	movw	r26, r28
 108:	11 96       	adiw	r26, 0x01	; 1
 10a:	01 90       	ld	r0, Z+
 10c:	0d 92       	st	X+, r0
 10e:	8a 95       	dec	r24
 110:	e1 f7       	brne	.-8      	; 0x10a <main+0x1e>
 112:	0e 94 01 01 	call	0x202	; 0x202 <lcd_clear>
 116:	0e 94 9d 00 	call	0x13a	; 0x13a <init>
 11a:	0e 94 01 01 	call	0x202	; 0x202 <lcd_clear>
 11e:	ce 01       	movw	r24, r28
 120:	01 96       	adiw	r24, 0x01	; 1
 122:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_write_string>
 126:	2f e7       	ldi	r18, 0x7F	; 127
 128:	8a e1       	ldi	r24, 0x1A	; 26
 12a:	96 e0       	ldi	r25, 0x06	; 6
 12c:	21 50       	subi	r18, 0x01	; 1
 12e:	80 40       	sbci	r24, 0x00	; 0
 130:	90 40       	sbci	r25, 0x00	; 0
 132:	e1 f7       	brne	.-8      	; 0x12c <main+0x40>
 134:	00 c0       	rjmp	.+0      	; 0x136 <main+0x4a>
 136:	00 00       	nop
 138:	f6 cf       	rjmp	.-20     	; 0x126 <main+0x3a>
