
B2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000160  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000a4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000160  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000038  00000000  00000000  0000018f  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000b0c  00000000  00000000  000001c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000819  00000000  00000000  00000cd3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002c8  00000000  00000000  000014ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000074  00000000  00000000  000017b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000027d  00000000  00000000  00001828  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000e2  00000000  00000000  00001aa5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000028  00000000  00000000  00001b87  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  00000108  00000108  0000015c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001bb0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.__vector_1 00000024  000000a4  000000a4  000000f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.__vector_2 00000024  000000c8  000000c8  0000011c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.main    0000001c  000000ec  000000ec  00000140  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 52 00 	jmp	0xa4	; 0xa4 <_etext>
   8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__vector_2>
   c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  10:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  14:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  18:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  1c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  20:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  24:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  28:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  2c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  30:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  34:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  38:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  3c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  40:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  44:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  48:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  4c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  50:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  54:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  58:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  5c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  60:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  64:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  68:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  6c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  70:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  74:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  78:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  7c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  80:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  84:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  88:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	0e 94 76 00 	call	0xec	; 0xec <main>
  9c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <_exit>

000000a0 <_exit>:
  a0:	f8 94       	cli

000000a2 <__stop_program>:
  a2:	ff cf       	rjmp	.-2      	; 0xa2 <__stop_program>

Disassembly of section .text:

00000108 <__bad_interrupt>:
 108:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.__vector_1:

000000a4 <__vector_1>:
inputs:
outputs:
notes:			Set PORTD.5
Version :    	DMK, Initial code
*******************************************************************/
ISR( INT0_vect ) {
  a4:	1f 92       	push	r1
  a6:	0f 92       	push	r0
  a8:	0f b6       	in	r0, 0x3f	; 63
  aa:	0f 92       	push	r0
  ac:	11 24       	eor	r1, r1
  ae:	8f 93       	push	r24
	if (PORTD !=0x80)
  b0:	82 b3       	in	r24, 0x12	; 18
  b2:	80 38       	cpi	r24, 0x80	; 128
  b4:	19 f0       	breq	.+6      	; 0xbc <__vector_1+0x18>
	{
		PORTD = PORTD<<1;
  b6:	82 b3       	in	r24, 0x12	; 18
  b8:	88 0f       	add	r24, r24
  ba:	82 bb       	out	0x12, r24	; 18
	}
}
  bc:	8f 91       	pop	r24
  be:	0f 90       	pop	r0
  c0:	0f be       	out	0x3f, r0	; 63
  c2:	0f 90       	pop	r0
  c4:	1f 90       	pop	r1
  c6:	18 95       	reti

Disassembly of section .text.__vector_2:

000000c8 <__vector_2>:
inputs:
outputs:
notes:			Clear PORTD.5
Version :    	DMK, Initial code
*******************************************************************/
ISR( INT1_vect ) {
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	8f 93       	push	r24
	
	if (PORTD != 0x10)
  d4:	82 b3       	in	r24, 0x12	; 18
  d6:	80 31       	cpi	r24, 0x10	; 16
  d8:	19 f0       	breq	.+6      	; 0xe0 <__vector_2+0x18>
	{
		PORTD = PORTD>>1;
  da:	82 b3       	in	r24, 0x12	; 18
  dc:	86 95       	lsr	r24
  de:	82 bb       	out	0x12, r24	; 18
	}
}
  e0:	8f 91       	pop	r24
  e2:	0f 90       	pop	r0
  e4:	0f be       	out	0x3f, r0	; 63
  e6:	0f 90       	pop	r0
  e8:	1f 90       	pop	r1
  ea:	18 95       	reti

Disassembly of section .text.main:

000000ec <main>:


int main(void)
{
	
		DDRD = 0xF0;			// PORTD(7:4) output, PORTD(3:0) input
  ec:	80 ef       	ldi	r24, 0xF0	; 240
  ee:	81 bb       	out	0x11, r24	; 17
PORTD = 0x10;
  f0:	80 e1       	ldi	r24, 0x10	; 16
  f2:	82 bb       	out	0x12, r24	; 18
		// Init Interrupt hardware
		EICRA |= 0x0B;			// INT1 falling edge, INT0 rising edge
  f4:	ea e6       	ldi	r30, 0x6A	; 106
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	8b 60       	ori	r24, 0x0B	; 11
  fc:	80 83       	st	Z, r24
		EIMSK |= 0x03;			// Enable INT1 & INT0
  fe:	89 b7       	in	r24, 0x39	; 57
 100:	83 60       	ori	r24, 0x03	; 3
 102:	89 bf       	out	0x39, r24	; 57
		
		// Enable global interrupt system
		//SREG = 0x80;			// Of direct via SREG of via wrapper
		sei();
 104:	78 94       	sei
 106:	ff cf       	rjmp	.-2      	; 0x106 <main+0x1a>
