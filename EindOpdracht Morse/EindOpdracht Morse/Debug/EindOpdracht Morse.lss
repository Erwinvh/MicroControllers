
EindOpdracht Morse.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000008e7  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000102  00000000  00000000  000000f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800100  00800100  000008e7  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  000008e7  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000f0  00000000  00000000  00000916  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001a79  00000000  00000000  00000a06  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c45  00000000  00000000  0000247f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000889  00000000  00000000  000030c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002c0  00000000  00000000  00003950  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002eb  00000000  00000000  00003c10  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000883  00000000  00000000  00003efb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000e0  00000000  00000000  0000477e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  0000060c  0000060c  00000700  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004860  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.waitBuzz 0000001e  00000598  00000598  0000068c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.buzz_init 00000006  00000606  00000606  000006fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.setBuzzUnit 0000000a  000005f2  000005f2  000006e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.buzz_play 000000fe  00000102  00000102  000001f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .data.unit    00000002  00800309  000007f1  000008e5  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 19 .text.lcd_strobe_lcd_e 00000026  00000572  00000572  00000666  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.lcd_init 0000003e  000004c6  000004c6  000005ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.lcd_write_data 00000036  0000053c  0000053c  00000630  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.lcd_clear 0000001e  000005b6  000005b6  000006aa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.wait    0000001e  000005d4  000005d4  000006c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.__vector_1 00000058  00000380  00000380  00000474  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.__vector_2 00000058  000003d8  000003d8  000004cc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.__vector_3 000000b8  00000200  00000200  000002f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.__vector_4 00000060  00000320  00000320  00000414  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.adcInit 0000000a  000005fc  000005fc  000006f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.main    00000038  00000504  00000504  000005f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .bss.morsePos 00000002  0080030b  0080030b  000008e7  2**0
                  ALLOC
 31 .bss.morse    0000000c  008002f1  008002f1  000008e7  2**0
                  ALLOC
 32 .bss.sentenceLength 00000002  0080030d  0080030d  000008e7  2**0
                  ALLOC
 33 .text.getMorseFromChar 00000068  000002b8  000002b8  000003ac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.compareArray 00000040  00000486  00000486  0000057a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.getCharFromMorse 00000056  00000430  00000430  00000524  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .bss.morse.1589 0000000c  008002fd  008002fd  000008e7  2**0
                  ALLOC
 37 .data.MorseCodes 000001e1  00800110  00000610  00000704  2**0
                  CONTENTS, ALLOC, LOAD, DATA

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 55 00 	jmp	0xaa	; 0xaa <__ctors_end>
   4:	0c 94 c0 01 	jmp	0x380	; 0x380 <__vector_1>
   8:	0c 94 ec 01 	jmp	0x3d8	; 0x3d8 <__vector_2>
   c:	0c 94 00 01 	jmp	0x200	; 0x200 <__vector_3>
  10:	0c 94 90 01 	jmp	0x320	; 0x320 <__vector_4>
  14:	0c 94 06 03 	jmp	0x60c	; 0x60c <__bad_interrupt>
  18:	0c 94 06 03 	jmp	0x60c	; 0x60c <__bad_interrupt>
  1c:	0c 94 06 03 	jmp	0x60c	; 0x60c <__bad_interrupt>
  20:	0c 94 06 03 	jmp	0x60c	; 0x60c <__bad_interrupt>
  24:	0c 94 06 03 	jmp	0x60c	; 0x60c <__bad_interrupt>
  28:	0c 94 06 03 	jmp	0x60c	; 0x60c <__bad_interrupt>
  2c:	0c 94 06 03 	jmp	0x60c	; 0x60c <__bad_interrupt>
  30:	0c 94 06 03 	jmp	0x60c	; 0x60c <__bad_interrupt>
  34:	0c 94 06 03 	jmp	0x60c	; 0x60c <__bad_interrupt>
  38:	0c 94 06 03 	jmp	0x60c	; 0x60c <__bad_interrupt>
  3c:	0c 94 06 03 	jmp	0x60c	; 0x60c <__bad_interrupt>
  40:	0c 94 06 03 	jmp	0x60c	; 0x60c <__bad_interrupt>
  44:	0c 94 06 03 	jmp	0x60c	; 0x60c <__bad_interrupt>
  48:	0c 94 06 03 	jmp	0x60c	; 0x60c <__bad_interrupt>
  4c:	0c 94 06 03 	jmp	0x60c	; 0x60c <__bad_interrupt>
  50:	0c 94 06 03 	jmp	0x60c	; 0x60c <__bad_interrupt>
  54:	0c 94 06 03 	jmp	0x60c	; 0x60c <__bad_interrupt>
  58:	0c 94 06 03 	jmp	0x60c	; 0x60c <__bad_interrupt>
  5c:	0c 94 06 03 	jmp	0x60c	; 0x60c <__bad_interrupt>
  60:	0c 94 06 03 	jmp	0x60c	; 0x60c <__bad_interrupt>
  64:	0c 94 06 03 	jmp	0x60c	; 0x60c <__bad_interrupt>
  68:	0c 94 06 03 	jmp	0x60c	; 0x60c <__bad_interrupt>
  6c:	0c 94 06 03 	jmp	0x60c	; 0x60c <__bad_interrupt>
  70:	0c 94 06 03 	jmp	0x60c	; 0x60c <__bad_interrupt>
  74:	0c 94 06 03 	jmp	0x60c	; 0x60c <__bad_interrupt>
  78:	0c 94 06 03 	jmp	0x60c	; 0x60c <__bad_interrupt>
  7c:	0c 94 06 03 	jmp	0x60c	; 0x60c <__bad_interrupt>
  80:	0c 94 06 03 	jmp	0x60c	; 0x60c <__bad_interrupt>
  84:	0c 94 06 03 	jmp	0x60c	; 0x60c <__bad_interrupt>
  88:	0c 94 06 03 	jmp	0x60c	; 0x60c <__bad_interrupt>

0000008c <.dinit>:
  8c:	01 00       	.word	0x0001	; ????
  8e:	01 10       	cpse	r0, r1
  90:	80 01       	movw	r16, r0
  92:	10 02       	muls	r17, r16
  94:	f1 00       	.word	0x00f1	; ????
  96:	06 10       	cpse	r0, r6
  98:	02 f1       	brmi	.+64     	; 0xda <__do_copy_data+0x24>
  9a:	03 09       	sbc	r16, r3
  9c:	80 03       	fmuls	r16, r16
  9e:	09 03       	fmul	r16, r17
  a0:	0b 00       	.word	0x000b	; ????
  a2:	07 f1       	brie	.+64     	; 0xe4 <__do_copy_data+0x2e>
  a4:	03 0b       	sbc	r16, r19
  a6:	03 0f       	add	r16, r19
  a8:	80 00       	.word	0x0080	; ????

000000aa <__ctors_end>:
  aa:	11 24       	eor	r1, r1
  ac:	1f be       	out	0x3f, r1	; 63
  ae:	cf ef       	ldi	r28, 0xFF	; 255
  b0:	d0 e1       	ldi	r29, 0x10	; 16
  b2:	de bf       	out	0x3e, r29	; 62
  b4:	cd bf       	out	0x3d, r28	; 61

000000b6 <__do_copy_data>:
  b6:	ec e8       	ldi	r30, 0x8C	; 140
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	40 e0       	ldi	r20, 0x00	; 0
  bc:	19 c0       	rjmp	.+50     	; 0xf0 <__do_clear_bss+0x8>
  be:	b7 91       	elpm	r27, Z+
  c0:	a7 91       	elpm	r26, Z+
  c2:	37 91       	elpm	r19, Z+
  c4:	27 91       	elpm	r18, Z+
  c6:	07 91       	elpm	r16, Z+
  c8:	07 fd       	sbrc	r16, 7
  ca:	0e c0       	rjmp	.+28     	; 0xe8 <__do_clear_bss>
  cc:	97 91       	elpm	r25, Z+
  ce:	87 91       	elpm	r24, Z+
  d0:	ef 01       	movw	r28, r30
  d2:	f9 2f       	mov	r31, r25
  d4:	e8 2f       	mov	r30, r24
  d6:	0b bf       	out	0x3b, r16	; 59
  d8:	07 90       	elpm	r0, Z+
  da:	0d 92       	st	X+, r0
  dc:	a2 17       	cp	r26, r18
  de:	b3 07       	cpc	r27, r19
  e0:	d9 f7       	brne	.-10     	; 0xd8 <__do_copy_data+0x22>
  e2:	fe 01       	movw	r30, r28
  e4:	1b be       	out	0x3b, r1	; 59
  e6:	04 c0       	rjmp	.+8      	; 0xf0 <__do_clear_bss+0x8>

000000e8 <__do_clear_bss>:
  e8:	1d 92       	st	X+, r1
  ea:	a2 17       	cp	r26, r18
  ec:	b3 07       	cpc	r27, r19
  ee:	e1 f7       	brne	.-8      	; 0xe8 <__do_clear_bss>
  f0:	e9 3a       	cpi	r30, 0xA9	; 169
  f2:	f4 07       	cpc	r31, r20
  f4:	21 f7       	brne	.-56     	; 0xbe <__do_copy_data+0x8>
  f6:	0e 94 82 02 	call	0x504	; 0x504 <main>
  fa:	0c 94 7f 00 	jmp	0xfe	; 0xfe <_exit>

000000fe <_exit>:
  fe:	f8 94       	cli

00000100 <__stop_program>:
 100:	ff cf       	rjmp	.-2      	; 0x100 <__stop_program>

Disassembly of section .text:

0000060c <__bad_interrupt>:
 60c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.waitBuzz:

00000598 <waitBuzz>:

int unit = 100;

/*Busy wait number of millisecs*/
void waitBuzz( int ms ) {
	for (int i=0; i<ms; i++) {
 598:	20 e0       	ldi	r18, 0x00	; 0
 59a:	30 e0       	ldi	r19, 0x00	; 0
 59c:	08 c0       	rjmp	.+16     	; 0x5ae <waitBuzz+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 59e:	ef ec       	ldi	r30, 0xCF	; 207
 5a0:	f7 e0       	ldi	r31, 0x07	; 7
 5a2:	31 97       	sbiw	r30, 0x01	; 1
 5a4:	f1 f7       	brne	.-4      	; 0x5a2 <waitBuzz+0xa>
 5a6:	00 c0       	rjmp	.+0      	; 0x5a8 <waitBuzz+0x10>
 5a8:	00 00       	nop
 5aa:	2f 5f       	subi	r18, 0xFF	; 255
 5ac:	3f 4f       	sbci	r19, 0xFF	; 255
 5ae:	28 17       	cp	r18, r24
 5b0:	39 07       	cpc	r19, r25
 5b2:	ac f3       	brlt	.-22     	; 0x59e <waitBuzz+0x6>
		_delay_ms( 1 );		// library function (max 30 ms at 8MHz)
	}
}
 5b4:	08 95       	ret

Disassembly of section .text.buzz_init:

00000606 <buzz_init>:

void buzz_init(void){
	DDRD = 0xF0;
 606:	80 ef       	ldi	r24, 0xF0	; 240
 608:	81 bb       	out	0x11, r24	; 17
 60a:	08 95       	ret

Disassembly of section .text.setBuzzUnit:

000005f2 <setBuzzUnit>:
}

void setBuzzUnit(int speed) {
	unit = speed;
 5f2:	90 93 0a 03 	sts	0x030A, r25	; 0x80030a <unit+0x1>
 5f6:	80 93 09 03 	sts	0x0309, r24	; 0x800309 <unit>
 5fa:	08 95       	ret

Disassembly of section .text.buzz_play:

00000102 <buzz_play>:
}

void buzz_play(char sentence[], int sentenceLenght){
 102:	8f 92       	push	r8
 104:	9f 92       	push	r9
 106:	af 92       	push	r10
 108:	bf 92       	push	r11
 10a:	cf 92       	push	r12
 10c:	df 92       	push	r13
 10e:	ef 92       	push	r14
 110:	ff 92       	push	r15
 112:	0f 93       	push	r16
 114:	1f 93       	push	r17
 116:	cf 93       	push	r28
 118:	df 93       	push	r29
 11a:	5c 01       	movw	r10, r24
 11c:	6b 01       	movw	r12, r22
	for (int i = 0; i < sentenceLenght; i++)
 11e:	e1 2c       	mov	r14, r1
 120:	f1 2c       	mov	r15, r1
 122:	5d c0       	rjmp	.+186    	; 0x1de <buzz_play+0xdc>
	{
		char character = sentence[i];
 124:	f5 01       	movw	r30, r10
 126:	ee 0d       	add	r30, r14
 128:	ff 1d       	adc	r31, r15
 12a:	80 81       	ld	r24, Z
		
		if (character == ' ')
 12c:	80 32       	cpi	r24, 0x20	; 32
 12e:	81 f4       	brne	.+32     	; 0x150 <buzz_play+0x4e>
		{
			waitBuzz(7 * unit);
 130:	20 91 09 03 	lds	r18, 0x0309	; 0x800309 <unit>
 134:	30 91 0a 03 	lds	r19, 0x030A	; 0x80030a <unit+0x1>
 138:	c9 01       	movw	r24, r18
 13a:	88 0f       	add	r24, r24
 13c:	99 1f       	adc	r25, r25
 13e:	88 0f       	add	r24, r24
 140:	99 1f       	adc	r25, r25
 142:	88 0f       	add	r24, r24
 144:	99 1f       	adc	r25, r25
 146:	82 1b       	sub	r24, r18
 148:	93 0b       	sbc	r25, r19
 14a:	0e 94 cc 02 	call	0x598	; 0x598 <waitBuzz>
 14e:	44 c0       	rjmp	.+136    	; 0x1d8 <buzz_play+0xd6>
		}else
		{		
			int *p;
			p = getMorseFromChar(character);
 150:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <getMorseFromChar>
 154:	4c 01       	movw	r8, r24
		
			  for (int i = 0; i < 6; i++ ) {
 156:	c0 e0       	ldi	r28, 0x00	; 0
 158:	d0 e0       	ldi	r29, 0x00	; 0
 15a:	33 c0       	rjmp	.+102    	; 0x1c2 <buzz_play+0xc0>
				  int morsePart = *(p + i);
 15c:	fe 01       	movw	r30, r28
 15e:	ee 0f       	add	r30, r30
 160:	ff 1f       	adc	r31, r31
 162:	e8 0d       	add	r30, r8
 164:	f9 1d       	adc	r31, r9
 166:	00 81       	ld	r16, Z
 168:	11 81       	ldd	r17, Z+1	; 0x01
			  
				  if (morsePart == dot)
 16a:	01 30       	cpi	r16, 0x01	; 1
 16c:	11 05       	cpc	r17, r1
 16e:	79 f4       	brne	.+30     	; 0x18e <buzz_play+0x8c>
				  {
					  PORTD = 0x10;
 170:	80 e1       	ldi	r24, 0x10	; 16
 172:	82 bb       	out	0x12, r24	; 18
					  waitBuzz(unit);
 174:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <unit>
 178:	90 91 0a 03 	lds	r25, 0x030A	; 0x80030a <unit+0x1>
 17c:	0e 94 cc 02 	call	0x598	; 0x598 <waitBuzz>
					  PORTD = 0x00;
 180:	12 ba       	out	0x12, r1	; 18
					  waitBuzz(unit);
 182:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <unit>
 186:	90 91 0a 03 	lds	r25, 0x030A	; 0x80030a <unit+0x1>
 18a:	0e 94 cc 02 	call	0x598	; 0x598 <waitBuzz>
				  }
				  if (morsePart == dash)
 18e:	02 30       	cpi	r16, 0x02	; 2
 190:	11 05       	cpc	r17, r1
 192:	a1 f4       	brne	.+40     	; 0x1bc <buzz_play+0xba>
				  {
					  PORTD = 0x10;
 194:	80 e1       	ldi	r24, 0x10	; 16
 196:	82 bb       	out	0x12, r24	; 18
					  waitBuzz(3 * unit);
 198:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <unit>
 19c:	90 91 0a 03 	lds	r25, 0x030A	; 0x80030a <unit+0x1>
 1a0:	9c 01       	movw	r18, r24
 1a2:	22 0f       	add	r18, r18
 1a4:	33 1f       	adc	r19, r19
 1a6:	82 0f       	add	r24, r18
 1a8:	93 1f       	adc	r25, r19
 1aa:	0e 94 cc 02 	call	0x598	; 0x598 <waitBuzz>
					  PORTD = 0x00;
 1ae:	12 ba       	out	0x12, r1	; 18
					  waitBuzz(unit);
 1b0:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <unit>
 1b4:	90 91 0a 03 	lds	r25, 0x030A	; 0x80030a <unit+0x1>
 1b8:	0e 94 cc 02 	call	0x598	; 0x598 <waitBuzz>
				  }
				  if (morsePart == empty)
 1bc:	01 2b       	or	r16, r17
 1be:	21 f0       	breq	.+8      	; 0x1c8 <buzz_play+0xc6>
		}else
		{		
			int *p;
			p = getMorseFromChar(character);
		
			  for (int i = 0; i < 6; i++ ) {
 1c0:	21 96       	adiw	r28, 0x01	; 1
 1c2:	c6 30       	cpi	r28, 0x06	; 6
 1c4:	d1 05       	cpc	r29, r1
 1c6:	54 f2       	brlt	.-108    	; 0x15c <buzz_play+0x5a>
				  if (morsePart == empty)
				  {
					  break;
				  }
			  }
			  waitBuzz(2 * unit);			
 1c8:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <unit>
 1cc:	90 91 0a 03 	lds	r25, 0x030A	; 0x80030a <unit+0x1>
 1d0:	88 0f       	add	r24, r24
 1d2:	99 1f       	adc	r25, r25
 1d4:	0e 94 cc 02 	call	0x598	; 0x598 <waitBuzz>
void setBuzzUnit(int speed) {
	unit = speed;
}

void buzz_play(char sentence[], int sentenceLenght){
	for (int i = 0; i < sentenceLenght; i++)
 1d8:	8f ef       	ldi	r24, 0xFF	; 255
 1da:	e8 1a       	sub	r14, r24
 1dc:	f8 0a       	sbc	r15, r24
 1de:	ec 14       	cp	r14, r12
 1e0:	fd 04       	cpc	r15, r13
 1e2:	0c f4       	brge	.+2      	; 0x1e6 <buzz_play+0xe4>
 1e4:	9f cf       	rjmp	.-194    	; 0x124 <buzz_play+0x22>
				  }
			  }
			  waitBuzz(2 * unit);			
		}
	}
}
 1e6:	df 91       	pop	r29
 1e8:	cf 91       	pop	r28
 1ea:	1f 91       	pop	r17
 1ec:	0f 91       	pop	r16
 1ee:	ff 90       	pop	r15
 1f0:	ef 90       	pop	r14
 1f2:	df 90       	pop	r13
 1f4:	cf 90       	pop	r12
 1f6:	bf 90       	pop	r11
 1f8:	af 90       	pop	r10
 1fa:	9f 90       	pop	r9
 1fc:	8f 90       	pop	r8
 1fe:	08 95       	ret

Disassembly of section .text.lcd_strobe_lcd_e:

00000572 <lcd_strobe_lcd_e>:
	

}

void lcd_strobe_lcd_e(void) {
	PORTC |= (1<<LCD_E);	// E high
 572:	85 b3       	in	r24, 0x15	; 21
 574:	88 60       	ori	r24, 0x08	; 8
 576:	85 bb       	out	0x15, r24	; 21
 578:	8f ec       	ldi	r24, 0xCF	; 207
 57a:	97 e0       	ldi	r25, 0x07	; 7
 57c:	01 97       	sbiw	r24, 0x01	; 1
 57e:	f1 f7       	brne	.-4      	; 0x57c <lcd_strobe_lcd_e+0xa>
 580:	00 c0       	rjmp	.+0      	; 0x582 <lcd_strobe_lcd_e+0x10>
 582:	00 00       	nop
	_delay_ms(1);			// nodig
	PORTC &= ~(1<<LCD_E);  	// E low
 584:	85 b3       	in	r24, 0x15	; 21
 586:	87 7f       	andi	r24, 0xF7	; 247
 588:	85 bb       	out	0x15, r24	; 21
 58a:	8f ec       	ldi	r24, 0xCF	; 207
 58c:	97 e0       	ldi	r25, 0x07	; 7
 58e:	01 97       	sbiw	r24, 0x01	; 1
 590:	f1 f7       	brne	.-4      	; 0x58e <lcd_strobe_lcd_e+0x1c>
 592:	00 c0       	rjmp	.+0      	; 0x594 <lcd_strobe_lcd_e+0x22>
 594:	00 00       	nop
 596:	08 95       	ret

Disassembly of section .text.lcd_init:

000004c6 <lcd_init>:

#define LCD_E 	3
#define LCD_RS	2


void lcd_init(){
 4c6:	cf 93       	push	r28
	// PORTC output mode and all low (also E and RS pin)
	DDRC = 0xFF;
 4c8:	8f ef       	ldi	r24, 0xFF	; 255
 4ca:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x00;
 4cc:	15 ba       	out	0x15, r1	; 21

	// Step 2 (table 12)
	PORTC = 0x20;	// function set
 4ce:	c0 e2       	ldi	r28, 0x20	; 32
 4d0:	c5 bb       	out	0x15, r28	; 21
	lcd_strobe_lcd_e();
 4d2:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_strobe_lcd_e>

	// Step 3 (table 12)
	PORTC = 0x20;   // function set
 4d6:	c5 bb       	out	0x15, r28	; 21
	lcd_strobe_lcd_e();
 4d8:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_strobe_lcd_e>
	PORTC = 0x80;
 4dc:	80 e8       	ldi	r24, 0x80	; 128
 4de:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
 4e0:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_strobe_lcd_e>

	// Step 4 (table 12)
	PORTC = 0x00;   // Display on/off control
 4e4:	15 ba       	out	0x15, r1	; 21
	lcd_strobe_lcd_e();
 4e6:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_strobe_lcd_e>
	PORTC = 0xF0;
 4ea:	80 ef       	ldi	r24, 0xF0	; 240
 4ec:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
 4ee:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_strobe_lcd_e>

	// Step 4 (table 12)
	PORTC = 0x00;   // Entry mode set
 4f2:	15 ba       	out	0x15, r1	; 21
	lcd_strobe_lcd_e();
 4f4:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_strobe_lcd_e>
	PORTC = 0x60;
 4f8:	80 e6       	ldi	r24, 0x60	; 96
 4fa:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
 4fc:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_strobe_lcd_e>
	

}
 500:	cf 91       	pop	r28
 502:	08 95       	ret

Disassembly of section .text.lcd_write_data:

0000053c <lcd_write_data>:
	_delay_ms(1);			// nodig
	PORTC &= ~(1<<LCD_E);  	// E low
	_delay_ms(1);			// nodig?
}

void lcd_write_data(unsigned char byte) {
 53c:	cf 93       	push	r28
 53e:	c8 2f       	mov	r28, r24
	// First nibble.
	PORTC = byte;
 540:	85 bb       	out	0x15, r24	; 21
	PORTC |= (1<<LCD_RS);
 542:	85 b3       	in	r24, 0x15	; 21
 544:	84 60       	ori	r24, 0x04	; 4
 546:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
 548:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_strobe_lcd_e>

	// Second nibble
	PORTC = (byte<<4);
 54c:	c2 95       	swap	r28
 54e:	c0 7f       	andi	r28, 0xF0	; 240
 550:	c5 bb       	out	0x15, r28	; 21
	PORTC |= (1<<LCD_RS);
 552:	85 b3       	in	r24, 0x15	; 21
 554:	84 60       	ori	r24, 0x04	; 4
 556:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
 558:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_strobe_lcd_e>
 55c:	2f e7       	ldi	r18, 0x7F	; 127
 55e:	88 e3       	ldi	r24, 0x38	; 56
 560:	91 e0       	ldi	r25, 0x01	; 1
 562:	21 50       	subi	r18, 0x01	; 1
 564:	80 40       	sbci	r24, 0x00	; 0
 566:	90 40       	sbci	r25, 0x00	; 0
 568:	e1 f7       	brne	.-8      	; 0x562 <lcd_write_data+0x26>
 56a:	00 c0       	rjmp	.+0      	; 0x56c <lcd_write_data+0x30>
 56c:	00 00       	nop
	_delay_ms(50);
}
 56e:	cf 91       	pop	r28
 570:	08 95       	ret

Disassembly of section .text.lcd_clear:

000005b6 <lcd_clear>:

void lcd_clear() {
	PORTC = 0x00;   // Entry mode set
 5b6:	15 ba       	out	0x15, r1	; 21
	lcd_strobe_lcd_e();
 5b8:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_strobe_lcd_e>
	PORTC = 0x01;
 5bc:	81 e0       	ldi	r24, 0x01	; 1
 5be:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
 5c0:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_strobe_lcd_e>
		PORTC = 0x00;   // Entry mode set
 5c4:	15 ba       	out	0x15, r1	; 21
		lcd_strobe_lcd_e();
 5c6:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_strobe_lcd_e>
		PORTC = 0x02;
 5ca:	82 e0       	ldi	r24, 0x02	; 2
 5cc:	85 bb       	out	0x15, r24	; 21
		lcd_strobe_lcd_e();
 5ce:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_strobe_lcd_e>
 5d2:	08 95       	ret

Disassembly of section .text.wait:

000005d4 <wait>:
int morsePos = 0;


/*Busy wait number of millisecs*/
void wait( int ms ) {
	for (int i=0; i<ms; i++) {
 5d4:	20 e0       	ldi	r18, 0x00	; 0
 5d6:	30 e0       	ldi	r19, 0x00	; 0
 5d8:	08 c0       	rjmp	.+16     	; 0x5ea <wait+0x16>
 5da:	ef ec       	ldi	r30, 0xCF	; 207
 5dc:	f7 e0       	ldi	r31, 0x07	; 7
 5de:	31 97       	sbiw	r30, 0x01	; 1
 5e0:	f1 f7       	brne	.-4      	; 0x5de <wait+0xa>
 5e2:	00 c0       	rjmp	.+0      	; 0x5e4 <wait+0x10>
 5e4:	00 00       	nop
 5e6:	2f 5f       	subi	r18, 0xFF	; 255
 5e8:	3f 4f       	sbci	r19, 0xFF	; 255
 5ea:	28 17       	cp	r18, r24
 5ec:	39 07       	cpc	r19, r25
 5ee:	ac f3       	brlt	.-22     	; 0x5da <wait+0x6>
		_delay_ms( 1 );		// library function (max 30 ms at 8MHz)
	}
}
 5f0:	08 95       	ret

Disassembly of section .text.__vector_1:

00000380 <__vector_1>:

//dot pressed
ISR( INT0_vect ) {
 380:	1f 92       	push	r1
 382:	0f 92       	push	r0
 384:	0f b6       	in	r0, 0x3f	; 63
 386:	0f 92       	push	r0
 388:	11 24       	eor	r1, r1
 38a:	0b b6       	in	r0, 0x3b	; 59
 38c:	0f 92       	push	r0
 38e:	2f 93       	push	r18
 390:	3f 93       	push	r19
 392:	8f 93       	push	r24
 394:	9f 93       	push	r25
 396:	ef 93       	push	r30
 398:	ff 93       	push	r31
	// op PORTD.0
	morse[morsePos] = dot;
 39a:	80 91 0b 03 	lds	r24, 0x030B	; 0x80030b <morsePos>
 39e:	90 91 0c 03 	lds	r25, 0x030C	; 0x80030c <morsePos+0x1>
 3a2:	fc 01       	movw	r30, r24
 3a4:	ee 0f       	add	r30, r30
 3a6:	ff 1f       	adc	r31, r31
 3a8:	ef 50       	subi	r30, 0x0F	; 15
 3aa:	fd 4f       	sbci	r31, 0xFD	; 253
 3ac:	21 e0       	ldi	r18, 0x01	; 1
 3ae:	30 e0       	ldi	r19, 0x00	; 0
 3b0:	31 83       	std	Z+1, r19	; 0x01
 3b2:	20 83       	st	Z, r18
	morsePos++;
 3b4:	01 96       	adiw	r24, 0x01	; 1
 3b6:	90 93 0c 03 	sts	0x030C, r25	; 0x80030c <morsePos+0x1>
 3ba:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <morsePos>
	
}
 3be:	ff 91       	pop	r31
 3c0:	ef 91       	pop	r30
 3c2:	9f 91       	pop	r25
 3c4:	8f 91       	pop	r24
 3c6:	3f 91       	pop	r19
 3c8:	2f 91       	pop	r18
 3ca:	0f 90       	pop	r0
 3cc:	0b be       	out	0x3b, r0	; 59
 3ce:	0f 90       	pop	r0
 3d0:	0f be       	out	0x3f, r0	; 63
 3d2:	0f 90       	pop	r0
 3d4:	1f 90       	pop	r1
 3d6:	18 95       	reti

Disassembly of section .text.__vector_2:

000003d8 <__vector_2>:

//dash pressed
ISR( INT1_vect ) {
 3d8:	1f 92       	push	r1
 3da:	0f 92       	push	r0
 3dc:	0f b6       	in	r0, 0x3f	; 63
 3de:	0f 92       	push	r0
 3e0:	11 24       	eor	r1, r1
 3e2:	0b b6       	in	r0, 0x3b	; 59
 3e4:	0f 92       	push	r0
 3e6:	2f 93       	push	r18
 3e8:	3f 93       	push	r19
 3ea:	8f 93       	push	r24
 3ec:	9f 93       	push	r25
 3ee:	ef 93       	push	r30
 3f0:	ff 93       	push	r31
	// op PORTD.1
	morse[morsePos] = dash;
 3f2:	80 91 0b 03 	lds	r24, 0x030B	; 0x80030b <morsePos>
 3f6:	90 91 0c 03 	lds	r25, 0x030C	; 0x80030c <morsePos+0x1>
 3fa:	fc 01       	movw	r30, r24
 3fc:	ee 0f       	add	r30, r30
 3fe:	ff 1f       	adc	r31, r31
 400:	ef 50       	subi	r30, 0x0F	; 15
 402:	fd 4f       	sbci	r31, 0xFD	; 253
 404:	22 e0       	ldi	r18, 0x02	; 2
 406:	30 e0       	ldi	r19, 0x00	; 0
 408:	31 83       	std	Z+1, r19	; 0x01
 40a:	20 83       	st	Z, r18
	morsePos++;
 40c:	01 96       	adiw	r24, 0x01	; 1
 40e:	90 93 0c 03 	sts	0x030C, r25	; 0x80030c <morsePos+0x1>
 412:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <morsePos>
	
}
 416:	ff 91       	pop	r31
 418:	ef 91       	pop	r30
 41a:	9f 91       	pop	r25
 41c:	8f 91       	pop	r24
 41e:	3f 91       	pop	r19
 420:	2f 91       	pop	r18
 422:	0f 90       	pop	r0
 424:	0b be       	out	0x3b, r0	; 59
 426:	0f 90       	pop	r0
 428:	0f be       	out	0x3f, r0	; 63
 42a:	0f 90       	pop	r0
 42c:	1f 90       	pop	r1
 42e:	18 95       	reti

Disassembly of section .text.__vector_3:

00000200 <__vector_3>:

//next pressed
ISR( INT2_vect ) {
 200:	1f 92       	push	r1
 202:	0f 92       	push	r0
 204:	0f b6       	in	r0, 0x3f	; 63
 206:	0f 92       	push	r0
 208:	11 24       	eor	r1, r1
 20a:	0b b6       	in	r0, 0x3b	; 59
 20c:	0f 92       	push	r0
 20e:	2f 93       	push	r18
 210:	3f 93       	push	r19
 212:	4f 93       	push	r20
 214:	5f 93       	push	r21
 216:	6f 93       	push	r22
 218:	7f 93       	push	r23
 21a:	8f 93       	push	r24
 21c:	9f 93       	push	r25
 21e:	af 93       	push	r26
 220:	bf 93       	push	r27
 222:	cf 93       	push	r28
 224:	ef 93       	push	r30
 226:	ff 93       	push	r31
	// op PORTD.2
	unsigned char character = getCharFromMorse(morse);
 228:	81 ef       	ldi	r24, 0xF1	; 241
 22a:	92 e0       	ldi	r25, 0x02	; 2
 22c:	0e 94 18 02 	call	0x430	; 0x430 <getCharFromMorse>
 230:	c8 2f       	mov	r28, r24
	if (character != '$')
 232:	84 32       	cpi	r24, 0x24	; 36
 234:	d9 f0       	breq	.+54     	; 0x26c <__vector_3+0x6c>
	{
		if (!(sentence[sentenceLength-1] == ' ' && character == ' '))
 236:	e0 91 0d 03 	lds	r30, 0x030D	; 0x80030d <sentenceLength>
 23a:	f0 91 0e 03 	lds	r31, 0x030E	; 0x80030e <sentenceLength+0x1>
 23e:	e1 50       	subi	r30, 0x01	; 1
 240:	ff 4f       	sbci	r31, 0xFF	; 255
 242:	80 81       	ld	r24, Z
 244:	80 32       	cpi	r24, 0x20	; 32
 246:	11 f4       	brne	.+4      	; 0x24c <__vector_3+0x4c>
 248:	c0 32       	cpi	r28, 0x20	; 32
 24a:	81 f0       	breq	.+32     	; 0x26c <__vector_3+0x6c>
		{
			lcd_write_data(character);
 24c:	8c 2f       	mov	r24, r28
 24e:	0e 94 9e 02 	call	0x53c	; 0x53c <lcd_write_data>
			sentence[sentenceLength] = character;
 252:	80 91 0d 03 	lds	r24, 0x030D	; 0x80030d <sentenceLength>
 256:	90 91 0e 03 	lds	r25, 0x030E	; 0x80030e <sentenceLength+0x1>
 25a:	fc 01       	movw	r30, r24
 25c:	e0 50       	subi	r30, 0x00	; 0
 25e:	ff 4f       	sbci	r31, 0xFF	; 255
 260:	c0 83       	st	Z, r28
			sentenceLength++;
 262:	01 96       	adiw	r24, 0x01	; 1
 264:	90 93 0e 03 	sts	0x030E, r25	; 0x80030e <sentenceLength+0x1>
 268:	80 93 0d 03 	sts	0x030D, r24	; 0x80030d <sentenceLength>
	morsePos++;
	
}

//next pressed
ISR( INT2_vect ) {
 26c:	80 e0       	ldi	r24, 0x00	; 0
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	08 c0       	rjmp	.+16     	; 0x282 <__vector_3+0x82>
	}
	
	
	for (int i = 0; i < 6; i++)
	{
		morse[i] = empty;
 272:	fc 01       	movw	r30, r24
 274:	ee 0f       	add	r30, r30
 276:	ff 1f       	adc	r31, r31
 278:	ef 50       	subi	r30, 0x0F	; 15
 27a:	fd 4f       	sbci	r31, 0xFD	; 253
 27c:	11 82       	std	Z+1, r1	; 0x01
 27e:	10 82       	st	Z, r1
			sentenceLength++;
		}
	}
	
	
	for (int i = 0; i < 6; i++)
 280:	01 96       	adiw	r24, 0x01	; 1
 282:	86 30       	cpi	r24, 0x06	; 6
 284:	91 05       	cpc	r25, r1
 286:	ac f3       	brlt	.-22     	; 0x272 <__vector_3+0x72>
	{
		morse[i] = empty;
	}
	morsePos = 0;
 288:	10 92 0c 03 	sts	0x030C, r1	; 0x80030c <morsePos+0x1>
 28c:	10 92 0b 03 	sts	0x030B, r1	; 0x80030b <morsePos>
	
}
 290:	ff 91       	pop	r31
 292:	ef 91       	pop	r30
 294:	cf 91       	pop	r28
 296:	bf 91       	pop	r27
 298:	af 91       	pop	r26
 29a:	9f 91       	pop	r25
 29c:	8f 91       	pop	r24
 29e:	7f 91       	pop	r23
 2a0:	6f 91       	pop	r22
 2a2:	5f 91       	pop	r21
 2a4:	4f 91       	pop	r20
 2a6:	3f 91       	pop	r19
 2a8:	2f 91       	pop	r18
 2aa:	0f 90       	pop	r0
 2ac:	0b be       	out	0x3b, r0	; 59
 2ae:	0f 90       	pop	r0
 2b0:	0f be       	out	0x3f, r0	; 63
 2b2:	0f 90       	pop	r0
 2b4:	1f 90       	pop	r1
 2b6:	18 95       	reti

Disassembly of section .text.__vector_4:

00000320 <__vector_4>:

//biep biep pressed
ISR( INT3_vect ) {
 320:	1f 92       	push	r1
 322:	0f 92       	push	r0
 324:	0f b6       	in	r0, 0x3f	; 63
 326:	0f 92       	push	r0
 328:	11 24       	eor	r1, r1
 32a:	0b b6       	in	r0, 0x3b	; 59
 32c:	0f 92       	push	r0
 32e:	2f 93       	push	r18
 330:	3f 93       	push	r19
 332:	4f 93       	push	r20
 334:	5f 93       	push	r21
 336:	6f 93       	push	r22
 338:	7f 93       	push	r23
 33a:	8f 93       	push	r24
 33c:	9f 93       	push	r25
 33e:	af 93       	push	r26
 340:	bf 93       	push	r27
 342:	ef 93       	push	r30
 344:	ff 93       	push	r31
	// op PORTD.3
	buzz_init();
 346:	0e 94 03 03 	call	0x606	; 0x606 <buzz_init>
	buzz_play(sentence, sentenceLength);
 34a:	60 91 0d 03 	lds	r22, 0x030D	; 0x80030d <sentenceLength>
 34e:	70 91 0e 03 	lds	r23, 0x030E	; 0x80030e <sentenceLength+0x1>
 352:	80 e0       	ldi	r24, 0x00	; 0
 354:	91 e0       	ldi	r25, 0x01	; 1
 356:	0e 94 81 00 	call	0x102	; 0x102 <_etext>
}
 35a:	ff 91       	pop	r31
 35c:	ef 91       	pop	r30
 35e:	bf 91       	pop	r27
 360:	af 91       	pop	r26
 362:	9f 91       	pop	r25
 364:	8f 91       	pop	r24
 366:	7f 91       	pop	r23
 368:	6f 91       	pop	r22
 36a:	5f 91       	pop	r21
 36c:	4f 91       	pop	r20
 36e:	3f 91       	pop	r19
 370:	2f 91       	pop	r18
 372:	0f 90       	pop	r0
 374:	0b be       	out	0x3b, r0	; 59
 376:	0f 90       	pop	r0
 378:	0f be       	out	0x3f, r0	; 63
 37a:	0f 90       	pop	r0
 37c:	1f 90       	pop	r1
 37e:	18 95       	reti

Disassembly of section .text.adcInit:

000005fc <adcInit>:

// Initialize ADC: 10-bits (left justified), free running
void adcInit( void )
{
	ADMUX = 0b01100001;			// AREF=VCC, result left adjusted, channel1 at pin PF1
 5fc:	81 e6       	ldi	r24, 0x61	; 97
 5fe:	87 b9       	out	0x07, r24	; 7
	ADCSRA = 0b11100110;		// ADC-enable, no interrupt, start, free running, division by 64
 600:	86 ee       	ldi	r24, 0xE6	; 230
 602:	86 b9       	out	0x06, r24	; 6
 604:	08 95       	ret

Disassembly of section .text.main:

00000504 <main>:
}


int main(void)
{
	DDRD = 0xF0;
 504:	80 ef       	ldi	r24, 0xF0	; 240
 506:	81 bb       	out	0x11, r24	; 17
	EICRA |= 0xFF;
 508:	ea e6       	ldi	r30, 0x6A	; 106
 50a:	f0 e0       	ldi	r31, 0x00	; 0
 50c:	80 81       	ld	r24, Z
 50e:	8f ef       	ldi	r24, 0xFF	; 255
 510:	80 83       	st	Z, r24
	EIMSK |= 0x0F;
 512:	89 b7       	in	r24, 0x39	; 57
 514:	8f 60       	ori	r24, 0x0F	; 15
 516:	89 bf       	out	0x39, r24	; 57
	sei();	
 518:	78 94       	sei
	
	lcd_init();
 51a:	0e 94 63 02 	call	0x4c6	; 0x4c6 <lcd_init>
	lcd_clear();
 51e:	0e 94 db 02 	call	0x5b6	; 0x5b6 <lcd_clear>
	
	DDRF = 0x00;				// set PORTF for input (ADC)
 522:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	adcInit();					// initialize ADC
 526:	0e 94 fe 02 	call	0x5fc	; 0x5fc <adcInit>

	while (1)
	{
		setBuzzUnit(ADCH);
 52a:	85 b1       	in	r24, 0x05	; 5
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <setBuzzUnit>
		wait(100);				// every 100 ms (busy waiting)
 532:	84 e6       	ldi	r24, 0x64	; 100
 534:	90 e0       	ldi	r25, 0x00	; 0
 536:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <wait>
 53a:	f7 cf       	rjmp	.-18     	; 0x52a <main+0x26>

Disassembly of section .text.getMorseFromChar:

000002b8 <getMorseFromChar>:
	return '$';
}

int * getMorseFromChar(char character) {
	static int morse[6] = {empty, empty, empty, empty, empty, empty};
	for (int i = 0; i < 37; i++) {
 2b8:	20 e0       	ldi	r18, 0x00	; 0
 2ba:	30 e0       	ldi	r19, 0x00	; 0
 2bc:	2b c0       	rjmp	.+86     	; 0x314 <getMorseFromChar+0x5c>
		if (character == MorseCodes[i].character) {
 2be:	9d e0       	ldi	r25, 0x0D	; 13
 2c0:	92 9f       	mul	r25, r18
 2c2:	f0 01       	movw	r30, r0
 2c4:	93 9f       	mul	r25, r19
 2c6:	f0 0d       	add	r31, r0
 2c8:	11 24       	eor	r1, r1
 2ca:	e0 5f       	subi	r30, 0xF0	; 240
 2cc:	fe 4f       	sbci	r31, 0xFE	; 254
 2ce:	90 81       	ld	r25, Z
 2d0:	98 13       	cpse	r25, r24
 2d2:	1e c0       	rjmp	.+60     	; 0x310 <getMorseFromChar+0x58>
 2d4:	17 c0       	rjmp	.+46     	; 0x304 <getMorseFromChar+0x4c>
			
			for (int j = 0; j < 6; j++)
			{
				morse[j] = MorseCodes[i].morse[j];
 2d6:	ca 01       	movw	r24, r20
 2d8:	88 0f       	add	r24, r24
 2da:	99 1f       	adc	r25, r25
 2dc:	6d e0       	ldi	r22, 0x0D	; 13
 2de:	62 9f       	mul	r22, r18
 2e0:	f0 01       	movw	r30, r0
 2e2:	63 9f       	mul	r22, r19
 2e4:	f0 0d       	add	r31, r0
 2e6:	11 24       	eor	r1, r1
 2e8:	e8 0f       	add	r30, r24
 2ea:	f9 1f       	adc	r31, r25
 2ec:	e0 5f       	subi	r30, 0xF0	; 240
 2ee:	fe 4f       	sbci	r31, 0xFE	; 254
 2f0:	61 81       	ldd	r22, Z+1	; 0x01
 2f2:	72 81       	ldd	r23, Z+2	; 0x02
 2f4:	fc 01       	movw	r30, r24
 2f6:	e3 50       	subi	r30, 0x03	; 3
 2f8:	fd 4f       	sbci	r31, 0xFD	; 253
 2fa:	71 83       	std	Z+1, r23	; 0x01
 2fc:	60 83       	st	Z, r22
int * getMorseFromChar(char character) {
	static int morse[6] = {empty, empty, empty, empty, empty, empty};
	for (int i = 0; i < 37; i++) {
		if (character == MorseCodes[i].character) {
			
			for (int j = 0; j < 6; j++)
 2fe:	4f 5f       	subi	r20, 0xFF	; 255
 300:	5f 4f       	sbci	r21, 0xFF	; 255
 302:	02 c0       	rjmp	.+4      	; 0x308 <getMorseFromChar+0x50>
 304:	40 e0       	ldi	r20, 0x00	; 0
 306:	50 e0       	ldi	r21, 0x00	; 0
 308:	46 30       	cpi	r20, 0x06	; 6
 30a:	51 05       	cpc	r21, r1
 30c:	24 f3       	brlt	.-56     	; 0x2d6 <getMorseFromChar+0x1e>
 30e:	05 c0       	rjmp	.+10     	; 0x31a <getMorseFromChar+0x62>
	return '$';
}

int * getMorseFromChar(char character) {
	static int morse[6] = {empty, empty, empty, empty, empty, empty};
	for (int i = 0; i < 37; i++) {
 310:	2f 5f       	subi	r18, 0xFF	; 255
 312:	3f 4f       	sbci	r19, 0xFF	; 255
 314:	25 32       	cpi	r18, 0x25	; 37
 316:	31 05       	cpc	r19, r1
 318:	94 f2       	brlt	.-92     	; 0x2be <getMorseFromChar+0x6>
			}
			return morse;
		}
	}
	return morse;
}
 31a:	8d ef       	ldi	r24, 0xFD	; 253
 31c:	92 e0       	ldi	r25, 0x02	; 2
 31e:	08 95       	ret

Disassembly of section .text.compareArray:

00000486 <compareArray>:

char compareArray(int a[],int b[],int size) {
 486:	cf 93       	push	r28
 488:	df 93       	push	r29
	for(int i = 0;	i < size; i++) {
 48a:	e0 e0       	ldi	r30, 0x00	; 0
 48c:	f0 e0       	ldi	r31, 0x00	; 0
 48e:	12 c0       	rjmp	.+36     	; 0x4b4 <compareArray+0x2e>
		if(a[i] != b[i]) {
 490:	9f 01       	movw	r18, r30
 492:	22 0f       	add	r18, r18
 494:	33 1f       	adc	r19, r19
 496:	dc 01       	movw	r26, r24
 498:	a2 0f       	add	r26, r18
 49a:	b3 1f       	adc	r27, r19
 49c:	0d 90       	ld	r0, X+
 49e:	bc 91       	ld	r27, X
 4a0:	a0 2d       	mov	r26, r0
 4a2:	eb 01       	movw	r28, r22
 4a4:	c2 0f       	add	r28, r18
 4a6:	d3 1f       	adc	r29, r19
 4a8:	28 81       	ld	r18, Y
 4aa:	39 81       	ldd	r19, Y+1	; 0x01
 4ac:	a2 17       	cp	r26, r18
 4ae:	b3 07       	cpc	r27, r19
 4b0:	31 f4       	brne	.+12     	; 0x4be <compareArray+0x38>
	}
	return morse;
}

char compareArray(int a[],int b[],int size) {
	for(int i = 0;	i < size; i++) {
 4b2:	31 96       	adiw	r30, 0x01	; 1
 4b4:	e4 17       	cp	r30, r20
 4b6:	f5 07       	cpc	r31, r21
 4b8:	5c f3       	brlt	.-42     	; 0x490 <compareArray+0xa>
		if(a[i] != b[i]) {
			return 0;
		}
	}
	return 1;
 4ba:	81 e0       	ldi	r24, 0x01	; 1
 4bc:	01 c0       	rjmp	.+2      	; 0x4c0 <compareArray+0x3a>
}

char compareArray(int a[],int b[],int size) {
	for(int i = 0;	i < size; i++) {
		if(a[i] != b[i]) {
			return 0;
 4be:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	return 1;
 4c0:	df 91       	pop	r29
 4c2:	cf 91       	pop	r28
 4c4:	08 95       	ret

Disassembly of section .text.getCharFromMorse:

00000430 <getCharFromMorse>:
	{'8', {dash, dash, dash, dot, dot, empty}},
	{'9', {dash, dash, dash, dash, dot, empty}},
	{'0', {dash, dash, dash, dash, dash, empty}}
};

char getCharFromMorse(int morse[]) {
 430:	0f 93       	push	r16
 432:	1f 93       	push	r17
 434:	cf 93       	push	r28
 436:	df 93       	push	r29
 438:	8c 01       	movw	r16, r24
	
	for (int i = 0; i < 37; i++) {
 43a:	c0 e0       	ldi	r28, 0x00	; 0
 43c:	d0 e0       	ldi	r29, 0x00	; 0
 43e:	1a c0       	rjmp	.+52     	; 0x474 <getCharFromMorse+0x44>
		if (compareArray(MorseCodes[i].morse, morse, 6)) {
 440:	2d e0       	ldi	r18, 0x0D	; 13
 442:	2c 9f       	mul	r18, r28
 444:	c0 01       	movw	r24, r0
 446:	2d 9f       	mul	r18, r29
 448:	90 0d       	add	r25, r0
 44a:	11 24       	eor	r1, r1
 44c:	46 e0       	ldi	r20, 0x06	; 6
 44e:	50 e0       	ldi	r21, 0x00	; 0
 450:	b8 01       	movw	r22, r16
 452:	8f 5e       	subi	r24, 0xEF	; 239
 454:	9e 4f       	sbci	r25, 0xFE	; 254
 456:	0e 94 43 02 	call	0x486	; 0x486 <compareArray>
 45a:	88 23       	and	r24, r24
 45c:	51 f0       	breq	.+20     	; 0x472 <getCharFromMorse+0x42>
			return MorseCodes[i].character;
 45e:	8d e0       	ldi	r24, 0x0D	; 13
 460:	8c 9f       	mul	r24, r28
 462:	f0 01       	movw	r30, r0
 464:	8d 9f       	mul	r24, r29
 466:	f0 0d       	add	r31, r0
 468:	11 24       	eor	r1, r1
 46a:	e0 5f       	subi	r30, 0xF0	; 240
 46c:	fe 4f       	sbci	r31, 0xFE	; 254
 46e:	80 81       	ld	r24, Z
 470:	05 c0       	rjmp	.+10     	; 0x47c <getCharFromMorse+0x4c>
	{'0', {dash, dash, dash, dash, dash, empty}}
};

char getCharFromMorse(int morse[]) {
	
	for (int i = 0; i < 37; i++) {
 472:	21 96       	adiw	r28, 0x01	; 1
 474:	c5 32       	cpi	r28, 0x25	; 37
 476:	d1 05       	cpc	r29, r1
 478:	1c f3       	brlt	.-58     	; 0x440 <getCharFromMorse+0x10>
		if (compareArray(MorseCodes[i].morse, morse, 6)) {
			return MorseCodes[i].character;
		}
	}
	return '$';
 47a:	84 e2       	ldi	r24, 0x24	; 36
}
 47c:	df 91       	pop	r29
 47e:	cf 91       	pop	r28
 480:	1f 91       	pop	r17
 482:	0f 91       	pop	r16
 484:	08 95       	ret
