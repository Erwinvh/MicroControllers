
B6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000019c  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000a4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000028  00000000  00000000  000001cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000b1b  00000000  00000000  000001f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000818  00000000  00000000  00000d0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002f0  00000000  00000000  00001526  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000034  00000000  00000000  00001818  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000027d  00000000  00000000  0000184c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000134  00000000  00000000  00001ac9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  00001bfd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  00000144  00000144  00000198  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001c18  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.wait    0000001e  00000126  00000126  0000017a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.main    00000082  000000a4  000000a4  000000f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
   8:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
   c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  10:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  14:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  18:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  1c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  20:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  24:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  28:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  2c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  30:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  34:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  38:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  3c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  40:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  44:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  48:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  4c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  50:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  54:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  58:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  5c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  60:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  64:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  68:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  6c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  70:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  74:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  78:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  7c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  80:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  84:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
  88:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	0e 94 52 00 	call	0xa4	; 0xa4 <_etext>
  9c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <_exit>

000000a0 <_exit>:
  a0:	f8 94       	cli

000000a2 <__stop_program>:
  a2:	ff cf       	rjmp	.-2      	; 0xa2 <__stop_program>

Disassembly of section .text:

00000144 <__bad_interrupt>:
 144:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.wait:

00000126 <wait>:
				clock value is set. This is used by _delay_ms inside
				util/delay.h
Version :    	DMK, Initial code
*******************************************************************/
{
	for (int i=0; i<ms; i++)
 126:	20 e0       	ldi	r18, 0x00	; 0
 128:	30 e0       	ldi	r19, 0x00	; 0
 12a:	08 c0       	rjmp	.+16     	; 0x13c <wait+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12c:	ef ec       	ldi	r30, 0xCF	; 207
 12e:	f7 e0       	ldi	r31, 0x07	; 7
 130:	31 97       	sbiw	r30, 0x01	; 1
 132:	f1 f7       	brne	.-4      	; 0x130 <wait+0xa>
 134:	00 c0       	rjmp	.+0      	; 0x136 <wait+0x10>
 136:	00 00       	nop
 138:	2f 5f       	subi	r18, 0xFF	; 255
 13a:	3f 4f       	sbci	r19, 0xFF	; 255
 13c:	28 17       	cp	r18, r24
 13e:	39 07       	cpc	r19, r25
 140:	ac f3       	brlt	.-22     	; 0x12c <wait+0x6>
	{
		_delay_ms( 1 );		// library function (max 30 ms at 8MHz)
	}
}
 142:	08 95       	ret

Disassembly of section .text.main:

000000a4 <main>:
notes:			Looping forever, flipping bits on PORTD
Version :    	DMK, Initial code
*******************************************************************/
{
	
	DDRD = 0b11111111;			// All pins PORTD are set to output 
  a4:	8f ef       	ldi	r24, 0xFF	; 255
  a6:	81 bb       	out	0x11, r24	; 17
	DDRC = 0b00000000;
  a8:	14 ba       	out	0x14, r1	; 20
	int buttonReady = 0;
	int fast = 0;
	int hz = 1000;
  aa:	0f 2e       	mov	r0, r31
  ac:	f8 ee       	ldi	r31, 0xE8	; 232
  ae:	ef 2e       	mov	r14, r31
  b0:	f3 e0       	ldi	r31, 0x03	; 3
  b2:	ff 2e       	mov	r15, r31
  b4:	f0 2d       	mov	r31, r0
{
	
	DDRD = 0b11111111;			// All pins PORTD are set to output 
	DDRC = 0b00000000;
	int buttonReady = 0;
	int fast = 0;
  b6:	c0 e0       	ldi	r28, 0x00	; 0
  b8:	d0 e0       	ldi	r29, 0x00	; 0
*******************************************************************/
{
	
	DDRD = 0b11111111;			// All pins PORTD are set to output 
	DDRC = 0b00000000;
	int buttonReady = 0;
  ba:	00 e0       	ldi	r16, 0x00	; 0
  bc:	10 e0       	ldi	r17, 0x00	; 0
	int fast = 0;
	int hz = 1000;
	
	while (1)
	{
		if (PINC & 0x01 && buttonReady == 0)
  be:	98 9b       	sbis	0x13, 0	; 19
  c0:	20 c0       	rjmp	.+64     	; 0x102 <main+0x5e>
  c2:	01 15       	cp	r16, r1
  c4:	11 05       	cpc	r17, r1
  c6:	e9 f4       	brne	.+58     	; 0x102 <main+0x5e>
		{
			buttonReady = 1;
			fast = (fast + 1) % 2;
  c8:	ce 01       	movw	r24, r28
  ca:	01 96       	adiw	r24, 0x01	; 1
  cc:	81 70       	andi	r24, 0x01	; 1
  ce:	90 78       	andi	r25, 0x80	; 128
  d0:	99 23       	and	r25, r25
  d2:	24 f4       	brge	.+8      	; 0xdc <main+0x38>
  d4:	01 97       	sbiw	r24, 0x01	; 1
  d6:	8e 6f       	ori	r24, 0xFE	; 254
  d8:	9f 6f       	ori	r25, 0xFF	; 255
  da:	01 96       	adiw	r24, 0x01	; 1
  dc:	ec 01       	movw	r28, r24
			
			if (fast == 1)
  de:	01 97       	sbiw	r24, 0x01	; 1
  e0:	41 f4       	brne	.+16     	; 0xf2 <main+0x4e>
			{
				hz = 250;
  e2:	0f 2e       	mov	r0, r31
  e4:	fa ef       	ldi	r31, 0xFA	; 250
  e6:	ef 2e       	mov	r14, r31
  e8:	f1 2c       	mov	r15, r1
  ea:	f0 2d       	mov	r31, r0
	
	while (1)
	{
		if (PINC & 0x01 && buttonReady == 0)
		{
			buttonReady = 1;
  ec:	01 e0       	ldi	r16, 0x01	; 1
  ee:	10 e0       	ldi	r17, 0x00	; 0
  f0:	08 c0       	rjmp	.+16     	; 0x102 <main+0x5e>
			
			if (fast == 1)
			{
				hz = 250;
			}else{
				hz = 1000;
  f2:	0f 2e       	mov	r0, r31
  f4:	f8 ee       	ldi	r31, 0xE8	; 232
  f6:	ef 2e       	mov	r14, r31
  f8:	f3 e0       	ldi	r31, 0x03	; 3
  fa:	ff 2e       	mov	r15, r31
  fc:	f0 2d       	mov	r31, r0
	
	while (1)
	{
		if (PINC & 0x01 && buttonReady == 0)
		{
			buttonReady = 1;
  fe:	01 e0       	ldi	r16, 0x01	; 1
 100:	10 e0       	ldi	r17, 0x00	; 0
				hz = 250;
			}else{
				hz = 1000;
			}
		}		
		if(PINC & 0x01 && buttonReady == 1){
 102:	98 9b       	sbis	0x13, 0	; 19
 104:	05 c0       	rjmp	.+10     	; 0x110 <main+0x6c>
 106:	01 30       	cpi	r16, 0x01	; 1
 108:	11 05       	cpc	r17, r1
 10a:	11 f4       	brne	.+4      	; 0x110 <main+0x6c>
			buttonReady = 0;
 10c:	00 e0       	ldi	r16, 0x00	; 0
 10e:	10 e0       	ldi	r17, 0x00	; 0
		}
		
		if (PORTD == 0x80)
 110:	82 b3       	in	r24, 0x12	; 18
 112:	80 38       	cpi	r24, 0x80	; 128
 114:	11 f4       	brne	.+4      	; 0x11a <main+0x76>
		{
			PORTD = 0x00;
 116:	12 ba       	out	0x12, r1	; 18
 118:	02 c0       	rjmp	.+4      	; 0x11e <main+0x7a>
		}else{
			PORTD = 0x80;
 11a:	80 e8       	ldi	r24, 0x80	; 128
 11c:	82 bb       	out	0x12, r24	; 18
		}
		wait(hz);		
 11e:	c7 01       	movw	r24, r14
 120:	0e 94 93 00 	call	0x126	; 0x126 <wait>
	}
 124:	cc cf       	rjmp	.-104    	; 0xbe <main+0x1a>
