
B5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000018a  000001fe  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000ec  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  000001fe  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000028  00000000  00000000  0000022d  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000b2f  00000000  00000000  00000255  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000083b  00000000  00000000  00000d84  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000029c  00000000  00000000  000015bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000044  00000000  00000000  0000185c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000027d  00000000  00000000  000018a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000d5  00000000  00000000  00001b1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  00001bf2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  0000016a  0000016a  000001de  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001c0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.wait    0000001e  0000014c  0000014c  000001c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .rodata       0000001c  00800100  0000016e  000001e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 15 .text.main    00000060  000000ec  000000ec  00000160  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
   4:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
   8:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
   c:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  10:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  14:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  18:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  1c:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  20:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  24:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  28:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  2c:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  30:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  34:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  38:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  3c:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  40:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  44:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  48:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  4c:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  50:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  54:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  58:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  5c:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  60:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  64:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  68:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  6c:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  70:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  74:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  78:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  7c:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  80:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  84:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  88:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>

0000008c <.dinit>:
  8c:	01 00       	.word	0x0001	; ????
  8e:	01 1c       	adc	r0, r1
  90:	00 01       	movw	r0, r0
  92:	6e 00       	.word	0x006e	; ????

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
  a0:	ec e8       	ldi	r30, 0x8C	; 140
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	40 e0       	ldi	r20, 0x00	; 0
  a6:	19 c0       	rjmp	.+50     	; 0xda <__do_clear_bss+0x8>
  a8:	b7 91       	elpm	r27, Z+
  aa:	a7 91       	elpm	r26, Z+
  ac:	37 91       	elpm	r19, Z+
  ae:	27 91       	elpm	r18, Z+
  b0:	07 91       	elpm	r16, Z+
  b2:	07 fd       	sbrc	r16, 7
  b4:	0e c0       	rjmp	.+28     	; 0xd2 <__do_clear_bss>
  b6:	97 91       	elpm	r25, Z+
  b8:	87 91       	elpm	r24, Z+
  ba:	ef 01       	movw	r28, r30
  bc:	f9 2f       	mov	r31, r25
  be:	e8 2f       	mov	r30, r24
  c0:	0b bf       	out	0x3b, r16	; 59
  c2:	07 90       	elpm	r0, Z+
  c4:	0d 92       	st	X+, r0
  c6:	a2 17       	cp	r26, r18
  c8:	b3 07       	cpc	r27, r19
  ca:	d9 f7       	brne	.-10     	; 0xc2 <__do_copy_data+0x22>
  cc:	fe 01       	movw	r30, r28
  ce:	1b be       	out	0x3b, r1	; 59
  d0:	04 c0       	rjmp	.+8      	; 0xda <__do_clear_bss+0x8>

000000d2 <__do_clear_bss>:
  d2:	1d 92       	st	X+, r1
  d4:	a2 17       	cp	r26, r18
  d6:	b3 07       	cpc	r27, r19
  d8:	e1 f7       	brne	.-8      	; 0xd2 <__do_clear_bss>
  da:	e3 39       	cpi	r30, 0x93	; 147
  dc:	f4 07       	cpc	r31, r20
  de:	21 f7       	brne	.-56     	; 0xa8 <__do_copy_data+0x8>
  e0:	0e 94 76 00 	call	0xec	; 0xec <_etext>
  e4:	0c 94 74 00 	jmp	0xe8	; 0xe8 <_exit>

000000e8 <_exit>:
  e8:	f8 94       	cli

000000ea <__stop_program>:
  ea:	ff cf       	rjmp	.-2      	; 0xea <__stop_program>

Disassembly of section .text:

0000016a <__bad_interrupt>:
 16a:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.wait:

0000014c <wait>:


/******************************************************************/
void wait( int ms )
{
	for (int i=0; i<ms; i++)
 14c:	20 e0       	ldi	r18, 0x00	; 0
 14e:	30 e0       	ldi	r19, 0x00	; 0
 150:	08 c0       	rjmp	.+16     	; 0x162 <wait+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 152:	ef ec       	ldi	r30, 0xCF	; 207
 154:	f7 e0       	ldi	r31, 0x07	; 7
 156:	31 97       	sbiw	r30, 0x01	; 1
 158:	f1 f7       	brne	.-4      	; 0x156 <wait+0xa>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <wait+0x10>
 15c:	00 00       	nop
 15e:	2f 5f       	subi	r18, 0xFF	; 255
 160:	3f 4f       	sbci	r19, 0xFF	; 255
 162:	28 17       	cp	r18, r24
 164:	39 07       	cpc	r19, r25
 166:	ac f3       	brlt	.-22     	; 0x152 <wait+0x6>
	{
		_delay_ms( 1 );		// library function (max 30 ms at 8MHz)
	}
}
 168:	08 95       	ret

Disassembly of section .text.main:

000000ec <main>:

/******************************************************************/
int main( void )
{
  ec:	cf 93       	push	r28
  ee:	df 93       	push	r29
  f0:	cd b7       	in	r28, 0x3d	; 61
  f2:	de b7       	in	r29, 0x3e	; 62
  f4:	6c 97       	sbiw	r28, 0x1c	; 28
  f6:	0f b6       	in	r0, 0x3f	; 63
  f8:	f8 94       	cli
  fa:	de bf       	out	0x3e, r29	; 62
  fc:	0f be       	out	0x3f, r0	; 63
  fe:	cd bf       	out	0x3d, r28	; 61
	int light[] = {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x40, 0x20, 0x10, 0x08, 0x04, 0x02};
 100:	8c e1       	ldi	r24, 0x1C	; 28
 102:	e0 e0       	ldi	r30, 0x00	; 0
 104:	f1 e0       	ldi	r31, 0x01	; 1
 106:	de 01       	movw	r26, r28
 108:	11 96       	adiw	r26, 0x01	; 1
 10a:	01 90       	ld	r0, Z+
 10c:	0d 92       	st	X+, r0
 10e:	8a 95       	dec	r24
 110:	e1 f7       	brne	.-8      	; 0x10a <main+0x1e>
	DDRD = 0b11111111;			// All pins PORTD are set to output 
 112:	8f ef       	ldi	r24, 0xFF	; 255
 114:	81 bb       	out	0x11, r24	; 17
	DDRC = 0b00000000;
 116:	14 ba       	out	0x14, r1	; 20
	int position = 0;
 118:	00 e0       	ldi	r16, 0x00	; 0
 11a:	10 e0       	ldi	r17, 0x00	; 0
 11c:	02 c0       	rjmp	.+4      	; 0x122 <main+0x36>
		PORTD = light[position];
		position++;
		wait(100);
		if (position>13)
		{
			position = 0;
 11e:	00 e0       	ldi	r16, 0x00	; 0
 120:	10 e0       	ldi	r17, 0x00	; 0
	DDRD = 0b11111111;			// All pins PORTD are set to output 
	DDRC = 0b00000000;
	int position = 0;
	while (1)
	{
		PORTD = light[position];
 122:	f8 01       	movw	r30, r16
 124:	ee 0f       	add	r30, r30
 126:	ff 1f       	adc	r31, r31
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	8c 0f       	add	r24, r28
 12e:	9d 1f       	adc	r25, r29
 130:	e8 0f       	add	r30, r24
 132:	f9 1f       	adc	r31, r25
 134:	80 81       	ld	r24, Z
 136:	82 bb       	out	0x12, r24	; 18
		position++;
 138:	0f 5f       	subi	r16, 0xFF	; 255
 13a:	1f 4f       	sbci	r17, 0xFF	; 255
		wait(100);
 13c:	84 e6       	ldi	r24, 0x64	; 100
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	0e 94 a6 00 	call	0x14c	; 0x14c <wait>
		if (position>13)
 144:	0e 30       	cpi	r16, 0x0E	; 14
 146:	11 05       	cpc	r17, r1
 148:	54 f7       	brge	.-44     	; 0x11e <main+0x32>
 14a:	eb cf       	rjmp	.-42     	; 0x122 <main+0x36>
