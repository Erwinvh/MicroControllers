
B5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000027e  000002f2  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000ec  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  000002f2  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000060  00000000  00000000  00000321  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000e27  00000000  00000000  00000381  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000008b1  00000000  00000000  000011a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000466  00000000  00000000  00001a59  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000e0  00000000  00000000  00001ec0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000027d  00000000  00000000  00001fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000030e  00000000  00000000  0000221d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000050  00000000  00000000  0000252b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  0000026e  0000026e  000002e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000257c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.lcd_strobe_lcd_e 00000026  000001e4  000001e4  00000258  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.init    0000003e  00000142  00000142  000001b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.lcd_write_data 00000036  00000180  00000180  000001f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.display_text 0000002e  000001b6  000001b6  0000022a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.lcd_clear 0000001e  00000250  00000250  000002c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.lcd_write_cmd 00000024  0000020a  0000020a  0000027e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.set_cursor 00000022  0000022e  0000022e  000002a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .rodata       0000000c  00800100  00000272  000002e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 21 .text.main    00000056  000000ec  000000ec  00000160  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
   4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
   8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
   c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  10:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  14:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  18:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  1c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  20:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  24:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  28:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  2c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  30:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  34:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  38:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  3c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  40:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  44:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  48:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  4c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  50:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  54:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  58:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  5c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  60:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  64:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  68:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  6c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  70:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  74:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  78:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  7c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  80:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  84:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  88:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>

0000008c <.dinit>:
  8c:	01 00       	.word	0x0001	; ????
  8e:	01 0c       	add	r0, r1
  90:	00 02       	muls	r16, r16
  92:	72 00       	.word	0x0072	; ????

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
  a0:	ec e8       	ldi	r30, 0x8C	; 140
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	40 e0       	ldi	r20, 0x00	; 0
  a6:	19 c0       	rjmp	.+50     	; 0xda <__do_clear_bss+0x8>
  a8:	b7 91       	elpm	r27, Z+
  aa:	a7 91       	elpm	r26, Z+
  ac:	37 91       	elpm	r19, Z+
  ae:	27 91       	elpm	r18, Z+
  b0:	07 91       	elpm	r16, Z+
  b2:	07 fd       	sbrc	r16, 7
  b4:	0e c0       	rjmp	.+28     	; 0xd2 <__do_clear_bss>
  b6:	97 91       	elpm	r25, Z+
  b8:	87 91       	elpm	r24, Z+
  ba:	ef 01       	movw	r28, r30
  bc:	f9 2f       	mov	r31, r25
  be:	e8 2f       	mov	r30, r24
  c0:	0b bf       	out	0x3b, r16	; 59
  c2:	07 90       	elpm	r0, Z+
  c4:	0d 92       	st	X+, r0
  c6:	a2 17       	cp	r26, r18
  c8:	b3 07       	cpc	r27, r19
  ca:	d9 f7       	brne	.-10     	; 0xc2 <__do_copy_data+0x22>
  cc:	fe 01       	movw	r30, r28
  ce:	1b be       	out	0x3b, r1	; 59
  d0:	04 c0       	rjmp	.+8      	; 0xda <__do_clear_bss+0x8>

000000d2 <__do_clear_bss>:
  d2:	1d 92       	st	X+, r1
  d4:	a2 17       	cp	r26, r18
  d6:	b3 07       	cpc	r27, r19
  d8:	e1 f7       	brne	.-8      	; 0xd2 <__do_clear_bss>
  da:	e3 39       	cpi	r30, 0x93	; 147
  dc:	f4 07       	cpc	r31, r20
  de:	21 f7       	brne	.-56     	; 0xa8 <__do_copy_data+0x8>
  e0:	0e 94 76 00 	call	0xec	; 0xec <_etext>
  e4:	0c 94 74 00 	jmp	0xe8	; 0xe8 <_exit>

000000e8 <_exit>:
  e8:	f8 94       	cli

000000ea <__stop_program>:
  ea:	ff cf       	rjmp	.-2      	; 0xea <__stop_program>

Disassembly of section .text:

0000026e <__bad_interrupt>:
 26e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.lcd_strobe_lcd_e:

000001e4 <lcd_strobe_lcd_e>:
	

}

void lcd_strobe_lcd_e(void) {
	PORTC |= (1<<LCD_E);	// E high
 1e4:	85 b3       	in	r24, 0x15	; 21
 1e6:	88 60       	ori	r24, 0x08	; 8
 1e8:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ea:	8f ec       	ldi	r24, 0xCF	; 207
 1ec:	97 e0       	ldi	r25, 0x07	; 7
 1ee:	01 97       	sbiw	r24, 0x01	; 1
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <lcd_strobe_lcd_e+0xa>
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <lcd_strobe_lcd_e+0x10>
 1f4:	00 00       	nop
	_delay_ms(1);			// nodig
	PORTC &= ~(1<<LCD_E);  	// E low
 1f6:	85 b3       	in	r24, 0x15	; 21
 1f8:	87 7f       	andi	r24, 0xF7	; 247
 1fa:	85 bb       	out	0x15, r24	; 21
 1fc:	8f ec       	ldi	r24, 0xCF	; 207
 1fe:	97 e0       	ldi	r25, 0x07	; 7
 200:	01 97       	sbiw	r24, 0x01	; 1
 202:	f1 f7       	brne	.-4      	; 0x200 <lcd_strobe_lcd_e+0x1c>
 204:	00 c0       	rjmp	.+0      	; 0x206 <lcd_strobe_lcd_e+0x22>
 206:	00 00       	nop
 208:	08 95       	ret

Disassembly of section .text.init:

00000142 <init>:
/*Busy wait number of millisecs*/
void wait( int ms ) {
	for (int i=0; i<ms; i++) {
		_delay_ms( 1 );		// library function (max 30 ms at 8MHz)
	}
}
 142:	cf 93       	push	r28
 144:	8f ef       	ldi	r24, 0xFF	; 255
 146:	84 bb       	out	0x14, r24	; 20
 148:	15 ba       	out	0x15, r1	; 21
 14a:	c0 e2       	ldi	r28, 0x20	; 32
 14c:	c5 bb       	out	0x15, r28	; 21
 14e:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_strobe_lcd_e>
 152:	c5 bb       	out	0x15, r28	; 21
 154:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_strobe_lcd_e>
 158:	80 e8       	ldi	r24, 0x80	; 128
 15a:	85 bb       	out	0x15, r24	; 21
 15c:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_strobe_lcd_e>
 160:	15 ba       	out	0x15, r1	; 21
 162:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_strobe_lcd_e>
 166:	80 ef       	ldi	r24, 0xF0	; 240
 168:	85 bb       	out	0x15, r24	; 21
 16a:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_strobe_lcd_e>
 16e:	15 ba       	out	0x15, r1	; 21
 170:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_strobe_lcd_e>
 174:	80 e6       	ldi	r24, 0x60	; 96
 176:	85 bb       	out	0x15, r24	; 21
 178:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_strobe_lcd_e>
 17c:	cf 91       	pop	r28
 17e:	08 95       	ret

Disassembly of section .text.lcd_write_data:

00000180 <lcd_write_data>:
 180:	cf 93       	push	r28
 182:	c8 2f       	mov	r28, r24
 184:	85 bb       	out	0x15, r24	; 21
 186:	85 b3       	in	r24, 0x15	; 21
 188:	84 60       	ori	r24, 0x04	; 4
 18a:	85 bb       	out	0x15, r24	; 21
 18c:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_strobe_lcd_e>
 190:	c2 95       	swap	r28
 192:	c0 7f       	andi	r28, 0xF0	; 240
 194:	c5 bb       	out	0x15, r28	; 21
 196:	85 b3       	in	r24, 0x15	; 21
 198:	84 60       	ori	r24, 0x04	; 4
 19a:	85 bb       	out	0x15, r24	; 21
 19c:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_strobe_lcd_e>
 1a0:	2f e7       	ldi	r18, 0x7F	; 127
 1a2:	88 e3       	ldi	r24, 0x38	; 56
 1a4:	91 e0       	ldi	r25, 0x01	; 1
 1a6:	21 50       	subi	r18, 0x01	; 1
 1a8:	80 40       	sbci	r24, 0x00	; 0
 1aa:	90 40       	sbci	r25, 0x00	; 0
 1ac:	e1 f7       	brne	.-8      	; 0x1a6 <lcd_write_data+0x26>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <lcd_write_data+0x30>
 1b0:	00 00       	nop
 1b2:	cf 91       	pop	r28
 1b4:	08 95       	ret

Disassembly of section .text.display_text:

000001b6 <display_text>:
 1b6:	0f 93       	push	r16
 1b8:	1f 93       	push	r17
 1ba:	cf 93       	push	r28
 1bc:	df 93       	push	r29
 1be:	8c 01       	movw	r16, r24
 1c0:	c0 e0       	ldi	r28, 0x00	; 0
 1c2:	d0 e0       	ldi	r29, 0x00	; 0
 1c4:	07 c0       	rjmp	.+14     	; 0x1d4 <display_text+0x1e>
 1c6:	f8 01       	movw	r30, r16
 1c8:	ec 0f       	add	r30, r28
 1ca:	fd 1f       	adc	r31, r29
 1cc:	80 81       	ld	r24, Z
 1ce:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_write_data>
 1d2:	21 96       	adiw	r28, 0x01	; 1
 1d4:	cc 30       	cpi	r28, 0x0C	; 12
 1d6:	d1 05       	cpc	r29, r1
 1d8:	b4 f3       	brlt	.-20     	; 0x1c6 <display_text+0x10>
 1da:	df 91       	pop	r29
 1dc:	cf 91       	pop	r28
 1de:	1f 91       	pop	r17
 1e0:	0f 91       	pop	r16
 1e2:	08 95       	ret

Disassembly of section .text.lcd_clear:

00000250 <lcd_clear>:
	//	lcd_write_data(*str);
	//}
}

void lcd_clear() {
	PORTC = 0x00;   // Entry mode set
 250:	15 ba       	out	0x15, r1	; 21
	lcd_strobe_lcd_e();
 252:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_strobe_lcd_e>
	PORTC = 0x01;
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
 25a:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_strobe_lcd_e>
		PORTC = 0x00;   // Entry mode set
 25e:	15 ba       	out	0x15, r1	; 21
		lcd_strobe_lcd_e();
 260:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_strobe_lcd_e>
		PORTC = 0x02;
 264:	82 e0       	ldi	r24, 0x02	; 2
 266:	85 bb       	out	0x15, r24	; 21
		lcd_strobe_lcd_e();
 268:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_strobe_lcd_e>
 26c:	08 95       	ret

Disassembly of section .text.lcd_write_cmd:

0000020a <lcd_write_cmd>:
}

void lcd_write_cmd(unsigned char byte) {
 20a:	cf 93       	push	r28
 20c:	c8 2f       	mov	r28, r24
	// First nibble.
	PORTC = byte;
 20e:	85 bb       	out	0x15, r24	; 21
	PORTA &= ~(1<<LCD_RS);
 210:	8b b3       	in	r24, 0x1b	; 27
 212:	8b 7f       	andi	r24, 0xFB	; 251
 214:	8b bb       	out	0x1b, r24	; 27
	lcd_strobe_lcd_e();
 216:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_strobe_lcd_e>

	// Second nibble
	PORTC = (byte<<4);
 21a:	c2 95       	swap	r28
 21c:	c0 7f       	andi	r28, 0xF0	; 240
 21e:	c5 bb       	out	0x15, r28	; 21
	PORTA &= ~(1<<LCD_RS);
 220:	8b b3       	in	r24, 0x1b	; 27
 222:	8b 7f       	andi	r24, 0xFB	; 251
 224:	8b bb       	out	0x1b, r24	; 27
	lcd_strobe_lcd_e();
 226:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_strobe_lcd_e>
}
 22a:	cf 91       	pop	r28
 22c:	08 95       	ret

Disassembly of section .text.set_cursor:

0000022e <set_cursor>:

void set_cursor(int position) {
	if (position > -1 && position < 16) {
 22e:	80 31       	cpi	r24, 0x10	; 16
 230:	91 05       	cpc	r25, r1
 232:	20 f4       	brcc	.+8      	; 0x23c <set_cursor+0xe>
		position = position + 0x80;
		lcd_write_cmd(position);
 234:	80 58       	subi	r24, 0x80	; 128
 236:	0e 94 05 01 	call	0x20a	; 0x20a <lcd_write_cmd>
 23a:	08 95       	ret
	}
	else if(position > 15 && position < 32) {
 23c:	9c 01       	movw	r18, r24
 23e:	20 51       	subi	r18, 0x10	; 16
 240:	31 09       	sbc	r19, r1
 242:	20 31       	cpi	r18, 0x10	; 16
 244:	31 05       	cpc	r19, r1
 246:	18 f4       	brcc	.+6      	; 0x24e <set_cursor+0x20>
		position = position + 0x80+48;
		lcd_write_cmd(position);
 248:	80 55       	subi	r24, 0x50	; 80
 24a:	0e 94 05 01 	call	0x20a	; 0x20a <lcd_write_cmd>
 24e:	08 95       	ret

Disassembly of section .text.main:

000000ec <main>:
/*Busy wait number of millisecs*/
void wait( int ms ) {
	for (int i=0; i<ms; i++) {
		_delay_ms( 1 );		// library function (max 30 ms at 8MHz)
	}
}
  ec:	cf 93       	push	r28
  ee:	df 93       	push	r29
  f0:	cd b7       	in	r28, 0x3d	; 61
  f2:	de b7       	in	r29, 0x3e	; 62
  f4:	2c 97       	sbiw	r28, 0x0c	; 12
  f6:	0f b6       	in	r0, 0x3f	; 63
  f8:	f8 94       	cli
  fa:	de bf       	out	0x3e, r29	; 62
  fc:	0f be       	out	0x3f, r0	; 63
  fe:	cd bf       	out	0x3d, r28	; 61
 100:	8c e0       	ldi	r24, 0x0C	; 12
 102:	e0 e0       	ldi	r30, 0x00	; 0
 104:	f1 e0       	ldi	r31, 0x01	; 1
 106:	de 01       	movw	r26, r28
 108:	11 96       	adiw	r26, 0x01	; 1
 10a:	01 90       	ld	r0, Z+
 10c:	0d 92       	st	X+, r0
 10e:	8a 95       	dec	r24
 110:	e1 f7       	brne	.-8      	; 0x10a <main+0x1e>
 112:	0e 94 28 01 	call	0x250	; 0x250 <lcd_clear>
 116:	0e 94 a1 00 	call	0x142	; 0x142 <init>
 11a:	0e 94 28 01 	call	0x250	; 0x250 <lcd_clear>
 11e:	80 e1       	ldi	r24, 0x10	; 16
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	0e 94 17 01 	call	0x22e	; 0x22e <set_cursor>
 126:	ce 01       	movw	r24, r28
 128:	01 96       	adiw	r24, 0x01	; 1
 12a:	0e 94 db 00 	call	0x1b6	; 0x1b6 <display_text>
 12e:	2f e7       	ldi	r18, 0x7F	; 127
 130:	8a e1       	ldi	r24, 0x1A	; 26
 132:	96 e0       	ldi	r25, 0x06	; 6
 134:	21 50       	subi	r18, 0x01	; 1
 136:	80 40       	sbci	r24, 0x00	; 0
 138:	90 40       	sbci	r25, 0x00	; 0
 13a:	e1 f7       	brne	.-8      	; 0x134 <main+0x48>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <main+0x52>
 13e:	00 00       	nop
 140:	f6 cf       	rjmp	.-20     	; 0x12e <main+0x42>
