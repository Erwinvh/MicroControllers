
B3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001b8  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000a4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000030  00000000  00000000  000001e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000b98  00000000  00000000  00000217  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000084c  00000000  00000000  00000daf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002ef  00000000  00000000  000015fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000044  00000000  00000000  000018ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000027d  00000000  00000000  00001930  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000ee  00000000  00000000  00001bad  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000020  00000000  00000000  00001c9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  00000160  00000160  000001b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001cbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.wait    0000001e  00000130  00000130  00000184  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.display 00000028  00000108  00000108  0000015c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.main    00000044  000000c4  000000c4  00000118  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .progmemx.data.Numbers 00000020  000000a4  000000a4  000000f8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 17 .text.libgcc  00000012  0000014e  0000014e  000001a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
   8:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
   c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  10:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  14:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  18:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  1c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  20:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  24:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  28:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  2c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  30:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  34:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  38:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  3c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  40:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  44:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  48:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  4c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  50:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  54:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  58:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  5c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  60:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  64:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  68:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  6c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  70:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  74:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  78:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  7c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  80:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  84:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  88:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	0e 94 62 00 	call	0xc4	; 0xc4 <main>
  9c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <_exit>

000000a0 <_exit>:
  a0:	f8 94       	cli

000000a2 <__stop_program>:
  a2:	ff cf       	rjmp	.-2      	; 0xa2 <__stop_program>

Disassembly of section .text:

00000160 <__bad_interrupt>:
 160:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.wait:

00000130 <wait>:
				clock value is set. This is used by _delay_ms inside
				util/delay.h
Version :    	DMK, Initial code
*******************************************************************/
void wait( int ms ) {
	for (int i=0; i<ms; i++) {
 130:	20 e0       	ldi	r18, 0x00	; 0
 132:	30 e0       	ldi	r19, 0x00	; 0
 134:	08 c0       	rjmp	.+16     	; 0x146 <wait+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 136:	ef ec       	ldi	r30, 0xCF	; 207
 138:	f7 e0       	ldi	r31, 0x07	; 7
 13a:	31 97       	sbiw	r30, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <wait+0xa>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <wait+0x10>
 140:	00 00       	nop
 142:	2f 5f       	subi	r18, 0xFF	; 255
 144:	3f 4f       	sbci	r19, 0xFF	; 255
 146:	28 17       	cp	r18, r24
 148:	39 07       	cpc	r19, r25
 14a:	ac f3       	brlt	.-22     	; 0x136 <wait+0x6>
		_delay_ms( 1 );		// library function (max 30 ms at 8MHz)
	}
}
 14c:	08 95       	ret

Disassembly of section .text.display:

00000108 <display>:
};


void display(int digit){
	
if (digit>=0 && digit<=14)
 108:	8f 30       	cpi	r24, 0x0F	; 15
 10a:	91 05       	cpc	r25, r1
 10c:	70 f4       	brcc	.+28     	; 0x12a <display+0x22>
{
	PORTD = Numbers[digit];
 10e:	88 0f       	add	r24, r24
 110:	99 1f       	adc	r25, r25
 112:	09 2e       	mov	r0, r25
 114:	00 0c       	add	r0, r0
 116:	aa 0b       	sbc	r26, r26
 118:	8c 55       	subi	r24, 0x5C	; 92
 11a:	9f 4f       	sbci	r25, 0xFF	; 255
 11c:	af 4f       	sbci	r26, 0xFF	; 255
 11e:	fc 01       	movw	r30, r24
 120:	5a 2f       	mov	r21, r26
 122:	0e 94 a7 00 	call	0x14e	; 0x14e <__xload_2>
 126:	62 bb       	out	0x12, r22	; 18
 128:	08 95       	ret
}else{
	PORTD = Numbers[15];
 12a:	89 e7       	ldi	r24, 0x79	; 121
 12c:	82 bb       	out	0x12, r24	; 18
 12e:	08 95       	ret

Disassembly of section .text.main:

000000c4 <main>:
void display(int digit);


int main(void)
{
	DDRD = 0xFF;
  c4:	8f ef       	ldi	r24, 0xFF	; 255
  c6:	81 bb       	out	0x11, r24	; 17
	int pos = 0;
	DDRC = 0x00;
  c8:	14 ba       	out	0x14, r1	; 20


int main(void)
{
	DDRD = 0xFF;
	int pos = 0;
  ca:	c0 e0       	ldi	r28, 0x00	; 0
  cc:	d0 e0       	ldi	r29, 0x00	; 0
	DDRC = 0x00;
    while(1)
    {
		if (PINC & 0x01 && PINC & 0x02)
  ce:	98 9b       	sbis	0x13, 0	; 19
  d0:	09 c0       	rjmp	.+18     	; 0xe4 <main+0x20>
  d2:	99 9b       	sbis	0x13, 1	; 19
  d4:	07 c0       	rjmp	.+14     	; 0xe4 <main+0x20>
		{
			pos = 0;
			display(pos);
  d6:	80 e0       	ldi	r24, 0x00	; 0
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	0e 94 84 00 	call	0x108	; 0x108 <display>
	DDRC = 0x00;
    while(1)
    {
		if (PINC & 0x01 && PINC & 0x02)
		{
			pos = 0;
  de:	c0 e0       	ldi	r28, 0x00	; 0
  e0:	d0 e0       	ldi	r29, 0x00	; 0
			display(pos);
  e2:	0d c0       	rjmp	.+26     	; 0xfe <main+0x3a>
		}
		else if (PINC & 0x01)
  e4:	98 9b       	sbis	0x13, 0	; 19
  e6:	05 c0       	rjmp	.+10     	; 0xf2 <main+0x2e>
		{
			pos++;
  e8:	21 96       	adiw	r28, 0x01	; 1
			display(pos);
  ea:	ce 01       	movw	r24, r28
  ec:	0e 94 84 00 	call	0x108	; 0x108 <display>
  f0:	06 c0       	rjmp	.+12     	; 0xfe <main+0x3a>
		}
		else if (PINC & 0x02)
  f2:	99 9b       	sbis	0x13, 1	; 19
  f4:	04 c0       	rjmp	.+8      	; 0xfe <main+0x3a>
		{
			pos--;
  f6:	21 97       	sbiw	r28, 0x01	; 1
			display(pos);
  f8:	ce 01       	movw	r24, r28
  fa:	0e 94 84 00 	call	0x108	; 0x108 <display>
		}
		wait(250);
  fe:	8a ef       	ldi	r24, 0xFA	; 250
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	0e 94 98 00 	call	0x130	; 0x130 <wait>

    }
 106:	e3 cf       	rjmp	.-58     	; 0xce <main+0xa>

Disassembly of section .text.libgcc:

0000014e <__xload_2>:
 14e:	57 fd       	sbrc	r21, 7
 150:	04 c0       	rjmp	.+8      	; 0x15a <__xload_2+0xc>
 152:	5b bf       	out	0x3b, r21	; 59
 154:	67 91       	elpm	r22, Z+
 156:	77 91       	elpm	r23, Z+
 158:	08 95       	ret
 15a:	61 91       	ld	r22, Z+
 15c:	71 91       	ld	r23, Z+
 15e:	08 95       	ret
