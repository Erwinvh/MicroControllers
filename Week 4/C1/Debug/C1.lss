
C1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000370  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000a4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000370  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000078  00000000  00000000  0000039f  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000ffe  00000000  00000000  00000417  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000008ba  00000000  00000000  00001415  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000004c8  00000000  00000000  00001ccf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000108  00000000  00000000  00002198  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000288  00000000  00000000  000022a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000237  00000000  00000000  00002528  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000068  00000000  00000000  0000275f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  00000318  00000318  0000036c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000027c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.wait    0000001e  000002ae  000002ae  00000302  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.spi_masterInit 00000016  000002e4  000002e4  00000338  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.spi_write 00000008  00000310  00000310  00000364  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.spi_slaveSelect 00000018  000002cc  000002cc  00000320  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.spi_slaveDeSelect 00000016  000002fa  000002fa  0000034e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.displayDriverInit 00000062  0000018c  0000018c  000001e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.spi_writeWord 00000026  00000288  00000288  000002dc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.writeLedDisplay 000000e8  000000a4  000000a4  000000f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.main    0000004a  000001ee  000001ee  00000242  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.libgcc.div 00000028  00000238  00000238  0000028c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.libgcc.div 00000028  00000260  00000260  000002b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
   8:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
   c:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
  10:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
  14:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
  18:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
  1c:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
  20:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
  24:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
  28:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
  2c:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
  30:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
  34:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
  38:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
  3c:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
  40:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
  44:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
  48:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
  4c:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
  50:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
  54:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
  58:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
  5c:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
  60:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
  64:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
  68:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
  6c:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
  70:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
  74:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
  78:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
  7c:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
  80:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
  84:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>
  88:	0c 94 8c 01 	jmp	0x318	; 0x318 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	0e 94 f7 00 	call	0x1ee	; 0x1ee <main>
  9c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <_exit>

000000a0 <_exit>:
  a0:	f8 94       	cli

000000a2 <__stop_program>:
  a2:	ff cf       	rjmp	.-2      	; 0xa2 <__stop_program>

Disassembly of section .text:

00000318 <__bad_interrupt>:
 318:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.wait:

000002ae <wait>:
char spi_writeRead( unsigned char data ){
	SPDR = data; // Load byte --> starts transmission
	while( !(SPSR & BIT(SPIF)) ); // Wait for transmission complete
	data = SPDR; // New received data (eventually, MISO) in SPDR
	return data; // Return received byte
}
 2ae:	20 e0       	ldi	r18, 0x00	; 0
 2b0:	30 e0       	ldi	r19, 0x00	; 0
 2b2:	08 c0       	rjmp	.+16     	; 0x2c4 <wait+0x16>
 2b4:	ef ec       	ldi	r30, 0xCF	; 207
 2b6:	f7 e0       	ldi	r31, 0x07	; 7
 2b8:	31 97       	sbiw	r30, 0x01	; 1
 2ba:	f1 f7       	brne	.-4      	; 0x2b8 <wait+0xa>
 2bc:	00 c0       	rjmp	.+0      	; 0x2be <wait+0x10>
 2be:	00 00       	nop
 2c0:	2f 5f       	subi	r18, 0xFF	; 255
 2c2:	3f 4f       	sbci	r19, 0xFF	; 255
 2c4:	28 17       	cp	r18, r24
 2c6:	39 07       	cpc	r19, r25
 2c8:	ac f3       	brlt	.-22     	; 0x2b4 <wait+0x6>
 2ca:	08 95       	ret

Disassembly of section .text.spi_masterInit:

000002e4 <spi_masterInit>:
	for (int i=0; i<ms; i++)
	_delay_ms(1);
}

void spi_masterInit(void){
	DDR_SPI = 0xff; // All pins output: MOSI, SCK, SS, SS_display
 2e4:	8f ef       	ldi	r24, 0xFF	; 255
 2e6:	87 bb       	out	0x17, r24	; 23
	DDR_SPI &= ~BIT(SPI_MISO); // except: MISO input
 2e8:	87 b3       	in	r24, 0x17	; 23
 2ea:	87 7f       	andi	r24, 0xF7	; 247
 2ec:	87 bb       	out	0x17, r24	; 23
	PORT_SPI |= BIT(SPI_SS); // SS_ADC == 1: deselect slave
 2ee:	88 b3       	in	r24, 0x18	; 24
 2f0:	81 60       	ori	r24, 0x01	; 1
 2f2:	88 bb       	out	0x18, r24	; 24
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR1); // or: SPCR = 0b11010010;
 2f4:	82 e5       	ldi	r24, 0x52	; 82
 2f6:	8d b9       	out	0x0d, r24	; 13
 2f8:	08 95       	ret

Disassembly of section .text.spi_write:

00000310 <spi_write>:
	// bitrate=125kHz, Mode = 0: CPOL=0, CPPH=0
}

// Write a byte from master to slave
void spi_write( unsigned char data ){
	SPDR = data; // Load byte --> starts transmission
 310:	8f b9       	out	0x0f, r24	; 15
	while( !(SPSR & BIT(SPIF)) ); // Wait for transmission complete
 312:	77 9b       	sbis	0x0e, 7	; 14
 314:	fe cf       	rjmp	.-4      	; 0x312 <spi_write+0x2>
}
 316:	08 95       	ret

Disassembly of section .text.spi_slaveSelect:

000002cc <spi_slaveSelect>:
	return data; // Return received byte
}

// Select device on pinnumer PORTB
void spi_slaveSelect(unsigned char chipNumber){
	PORTB &= ~BIT(chipNumber);
 2cc:	98 b3       	in	r25, 0x18	; 24
 2ce:	21 e0       	ldi	r18, 0x01	; 1
 2d0:	30 e0       	ldi	r19, 0x00	; 0
 2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <spi_slaveSelect+0xc>
 2d4:	22 0f       	add	r18, r18
 2d6:	33 1f       	adc	r19, r19
 2d8:	8a 95       	dec	r24
 2da:	e2 f7       	brpl	.-8      	; 0x2d4 <spi_slaveSelect+0x8>
 2dc:	20 95       	com	r18
 2de:	29 23       	and	r18, r25
 2e0:	28 bb       	out	0x18, r18	; 24
 2e2:	08 95       	ret

Disassembly of section .text.spi_slaveDeSelect:

000002fa <spi_slaveDeSelect>:
}

// Deselect device on pinnumer PORTB
void spi_slaveDeSelect(unsigned char chipNumber){
	PORTB |= BIT(chipNumber);
 2fa:	98 b3       	in	r25, 0x18	; 24
 2fc:	21 e0       	ldi	r18, 0x01	; 1
 2fe:	30 e0       	ldi	r19, 0x00	; 0
 300:	02 c0       	rjmp	.+4      	; 0x306 <spi_slaveDeSelect+0xc>
 302:	22 0f       	add	r18, r18
 304:	33 1f       	adc	r19, r19
 306:	8a 95       	dec	r24
 308:	e2 f7       	brpl	.-8      	; 0x302 <spi_slaveDeSelect+0x8>
 30a:	29 2b       	or	r18, r25
 30c:	28 bb       	out	0x18, r18	; 24
 30e:	08 95       	ret

Disassembly of section .text.displayDriverInit:

0000018c <displayDriverInit>:
char spi_writeRead( unsigned char data ){
	SPDR = data; // Load byte --> starts transmission
	while( !(SPSR & BIT(SPIF)) ); // Wait for transmission complete
	data = SPDR; // New received data (eventually, MISO) in SPDR
	return data; // Return received byte
}
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	0e 94 66 01 	call	0x2cc	; 0x2cc <spi_slaveSelect>
 192:	89 e0       	ldi	r24, 0x09	; 9
 194:	0e 94 88 01 	call	0x310	; 0x310 <spi_write>
 198:	8f ef       	ldi	r24, 0xFF	; 255
 19a:	0e 94 88 01 	call	0x310	; 0x310 <spi_write>
 19e:	80 e0       	ldi	r24, 0x00	; 0
 1a0:	0e 94 7d 01 	call	0x2fa	; 0x2fa <spi_slaveDeSelect>
 1a4:	80 e0       	ldi	r24, 0x00	; 0
 1a6:	0e 94 66 01 	call	0x2cc	; 0x2cc <spi_slaveSelect>
 1aa:	8a e0       	ldi	r24, 0x0A	; 10
 1ac:	0e 94 88 01 	call	0x310	; 0x310 <spi_write>
 1b0:	8f e0       	ldi	r24, 0x0F	; 15
 1b2:	0e 94 88 01 	call	0x310	; 0x310 <spi_write>
 1b6:	80 e0       	ldi	r24, 0x00	; 0
 1b8:	0e 94 7d 01 	call	0x2fa	; 0x2fa <spi_slaveDeSelect>
 1bc:	80 e0       	ldi	r24, 0x00	; 0
 1be:	0e 94 66 01 	call	0x2cc	; 0x2cc <spi_slaveSelect>
 1c2:	8b e0       	ldi	r24, 0x0B	; 11
 1c4:	0e 94 88 01 	call	0x310	; 0x310 <spi_write>
 1c8:	83 e0       	ldi	r24, 0x03	; 3
 1ca:	0e 94 88 01 	call	0x310	; 0x310 <spi_write>
 1ce:	80 e0       	ldi	r24, 0x00	; 0
 1d0:	0e 94 7d 01 	call	0x2fa	; 0x2fa <spi_slaveDeSelect>
 1d4:	80 e0       	ldi	r24, 0x00	; 0
 1d6:	0e 94 66 01 	call	0x2cc	; 0x2cc <spi_slaveSelect>
 1da:	8c e0       	ldi	r24, 0x0C	; 12
 1dc:	0e 94 88 01 	call	0x310	; 0x310 <spi_write>
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	0e 94 88 01 	call	0x310	; 0x310 <spi_write>
 1e6:	80 e0       	ldi	r24, 0x00	; 0
 1e8:	0e 94 7d 01 	call	0x2fa	; 0x2fa <spi_slaveDeSelect>
 1ec:	08 95       	ret

Disassembly of section .text.spi_writeWord:

00000288 <spi_writeWord>:
 288:	cf 93       	push	r28
 28a:	df 93       	push	r29
 28c:	d8 2f       	mov	r29, r24
 28e:	c6 2f       	mov	r28, r22
 290:	80 e0       	ldi	r24, 0x00	; 0
 292:	0e 94 66 01 	call	0x2cc	; 0x2cc <spi_slaveSelect>
 296:	8d 2f       	mov	r24, r29
 298:	0e 94 88 01 	call	0x310	; 0x310 <spi_write>
 29c:	8c 2f       	mov	r24, r28
 29e:	0e 94 88 01 	call	0x310	; 0x310 <spi_write>
 2a2:	80 e0       	ldi	r24, 0x00	; 0
 2a4:	0e 94 7d 01 	call	0x2fa	; 0x2fa <spi_slaveDeSelect>
 2a8:	df 91       	pop	r29
 2aa:	cf 91       	pop	r28
 2ac:	08 95       	ret

Disassembly of section .text.writeLedDisplay:

000000a4 <writeLedDisplay>:
  a4:	ef 92       	push	r14
  a6:	ff 92       	push	r15
  a8:	0f 93       	push	r16
  aa:	1f 93       	push	r17
  ac:	cf 93       	push	r28
  ae:	df 93       	push	r29
  b0:	ec 01       	movw	r28, r24
  b2:	80 31       	cpi	r24, 0x10	; 16
  b4:	27 e2       	ldi	r18, 0x27	; 39
  b6:	92 07       	cpc	r25, r18
  b8:	78 f5       	brcc	.+94     	; 0x118 <writeLedDisplay+0x74>
  ba:	68 ee       	ldi	r22, 0xE8	; 232
  bc:	73 e0       	ldi	r23, 0x03	; 3
  be:	0e 94 1c 01 	call	0x238	; 0x238 <__divmodhi4>
  c2:	84 e0       	ldi	r24, 0x04	; 4
  c4:	0e 94 44 01 	call	0x288	; 0x288 <spi_writeWord>
  c8:	0f 2e       	mov	r0, r31
  ca:	f4 e6       	ldi	r31, 0x64	; 100
  cc:	ef 2e       	mov	r14, r31
  ce:	f1 2c       	mov	r15, r1
  d0:	f0 2d       	mov	r31, r0
  d2:	ce 01       	movw	r24, r28
  d4:	b7 01       	movw	r22, r14
  d6:	0e 94 1c 01 	call	0x238	; 0x238 <__divmodhi4>
  da:	cb 01       	movw	r24, r22
  dc:	0a e0       	ldi	r16, 0x0A	; 10
  de:	10 e0       	ldi	r17, 0x00	; 0
  e0:	b8 01       	movw	r22, r16
  e2:	0e 94 1c 01 	call	0x238	; 0x238 <__divmodhi4>
  e6:	68 2f       	mov	r22, r24
  e8:	83 e0       	ldi	r24, 0x03	; 3
  ea:	0e 94 44 01 	call	0x288	; 0x288 <spi_writeWord>
  ee:	ce 01       	movw	r24, r28
  f0:	b8 01       	movw	r22, r16
  f2:	0e 94 1c 01 	call	0x238	; 0x238 <__divmodhi4>
  f6:	c8 2f       	mov	r28, r24
  f8:	cb 01       	movw	r24, r22
  fa:	b7 01       	movw	r22, r14
  fc:	0e 94 1c 01 	call	0x238	; 0x238 <__divmodhi4>
 100:	b8 01       	movw	r22, r16
 102:	0e 94 1c 01 	call	0x238	; 0x238 <__divmodhi4>
 106:	68 2f       	mov	r22, r24
 108:	82 e0       	ldi	r24, 0x02	; 2
 10a:	0e 94 44 01 	call	0x288	; 0x288 <spi_writeWord>
 10e:	6c 2f       	mov	r22, r28
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	0e 94 44 01 	call	0x288	; 0x288 <spi_writeWord>
 116:	33 c0       	rjmp	.+102    	; 0x17e <writeLedDisplay+0xda>
 118:	89 51       	subi	r24, 0x19	; 25
 11a:	9c 4f       	sbci	r25, 0xFC	; 252
 11c:	87 3e       	cpi	r24, 0xE7	; 231
 11e:	93 40       	sbci	r25, 0x03	; 3
 120:	70 f5       	brcc	.+92     	; 0x17e <writeLedDisplay+0xda>
 122:	6a e0       	ldi	r22, 0x0A	; 10
 124:	84 e0       	ldi	r24, 0x04	; 4
 126:	0e 94 44 01 	call	0x288	; 0x288 <spi_writeWord>
 12a:	d1 95       	neg	r29
 12c:	c1 95       	neg	r28
 12e:	d1 09       	sbc	r29, r1
 130:	0f 2e       	mov	r0, r31
 132:	f4 e6       	ldi	r31, 0x64	; 100
 134:	ef 2e       	mov	r14, r31
 136:	f1 2c       	mov	r15, r1
 138:	f0 2d       	mov	r31, r0
 13a:	ce 01       	movw	r24, r28
 13c:	b7 01       	movw	r22, r14
 13e:	0e 94 1c 01 	call	0x238	; 0x238 <__divmodhi4>
 142:	cb 01       	movw	r24, r22
 144:	0a e0       	ldi	r16, 0x0A	; 10
 146:	10 e0       	ldi	r17, 0x00	; 0
 148:	b8 01       	movw	r22, r16
 14a:	0e 94 1c 01 	call	0x238	; 0x238 <__divmodhi4>
 14e:	68 2f       	mov	r22, r24
 150:	83 e0       	ldi	r24, 0x03	; 3
 152:	0e 94 44 01 	call	0x288	; 0x288 <spi_writeWord>
 156:	ce 01       	movw	r24, r28
 158:	b8 01       	movw	r22, r16
 15a:	0e 94 1c 01 	call	0x238	; 0x238 <__divmodhi4>
 15e:	c8 2f       	mov	r28, r24
 160:	cb 01       	movw	r24, r22
 162:	b7 01       	movw	r22, r14
 164:	0e 94 1c 01 	call	0x238	; 0x238 <__divmodhi4>
 168:	b8 01       	movw	r22, r16
 16a:	0e 94 1c 01 	call	0x238	; 0x238 <__divmodhi4>
 16e:	68 2f       	mov	r22, r24
 170:	82 e0       	ldi	r24, 0x02	; 2
 172:	0e 94 44 01 	call	0x288	; 0x288 <spi_writeWord>
 176:	6c 2f       	mov	r22, r28
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	0e 94 44 01 	call	0x288	; 0x288 <spi_writeWord>
 17e:	df 91       	pop	r29
 180:	cf 91       	pop	r28
 182:	1f 91       	pop	r17
 184:	0f 91       	pop	r16
 186:	ff 90       	pop	r15
 188:	ef 90       	pop	r14
 18a:	08 95       	ret

Disassembly of section .text.main:

000001ee <main>:
 1ee:	cf 93       	push	r28
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	87 bb       	out	0x17, r24	; 23
 1f4:	0e 94 72 01 	call	0x2e4	; 0x2e4 <spi_masterInit>
 1f8:	0e 94 c6 00 	call	0x18c	; 0x18c <displayDriverInit>
 1fc:	c1 e0       	ldi	r28, 0x01	; 1
 1fe:	05 c0       	rjmp	.+10     	; 0x20a <main+0x1c>
 200:	80 e0       	ldi	r24, 0x00	; 0
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	0e 94 52 00 	call	0xa4	; 0xa4 <__data_load_end>
 208:	cf 5f       	subi	r28, 0xFF	; 255
 20a:	c5 30       	cpi	r28, 0x05	; 5
 20c:	c8 f3       	brcs	.-14     	; 0x200 <main+0x12>
 20e:	88 ee       	ldi	r24, 0xE8	; 232
 210:	93 e0       	ldi	r25, 0x03	; 3
 212:	0e 94 57 01 	call	0x2ae	; 0x2ae <wait>
 216:	c1 e0       	ldi	r28, 0x01	; 1
 218:	05 c0       	rjmp	.+10     	; 0x224 <main+0x36>
 21a:	81 e7       	ldi	r24, 0x71	; 113
 21c:	9a ef       	ldi	r25, 0xFA	; 250
 21e:	0e 94 52 00 	call	0xa4	; 0xa4 <__data_load_end>
 222:	cf 5f       	subi	r28, 0xFF	; 255
 224:	c5 30       	cpi	r28, 0x05	; 5
 226:	c8 f3       	brcs	.-14     	; 0x21a <main+0x2c>
 228:	88 ee       	ldi	r24, 0xE8	; 232
 22a:	93 e0       	ldi	r25, 0x03	; 3
 22c:	0e 94 57 01 	call	0x2ae	; 0x2ae <wait>
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	cf 91       	pop	r28
 236:	08 95       	ret

Disassembly of section .text.libgcc.div:

00000238 <__divmodhi4>:
 238:	97 fb       	bst	r25, 7
 23a:	07 2e       	mov	r0, r23
 23c:	16 f4       	brtc	.+4      	; 0x242 <__divmodhi4+0xa>
 23e:	00 94       	com	r0
 240:	07 d0       	rcall	.+14     	; 0x250 <__divmodhi4_neg1>
 242:	77 fd       	sbrc	r23, 7
 244:	09 d0       	rcall	.+18     	; 0x258 <__divmodhi4_neg2>
 246:	0e 94 30 01 	call	0x260	; 0x260 <__udivmodhi4>
 24a:	07 fc       	sbrc	r0, 7
 24c:	05 d0       	rcall	.+10     	; 0x258 <__divmodhi4_neg2>
 24e:	3e f4       	brtc	.+14     	; 0x25e <__divmodhi4_exit>

00000250 <__divmodhi4_neg1>:
 250:	90 95       	com	r25
 252:	81 95       	neg	r24
 254:	9f 4f       	sbci	r25, 0xFF	; 255
 256:	08 95       	ret

00000258 <__divmodhi4_neg2>:
 258:	70 95       	com	r23
 25a:	61 95       	neg	r22
 25c:	7f 4f       	sbci	r23, 0xFF	; 255

0000025e <__divmodhi4_exit>:
 25e:	08 95       	ret

Disassembly of section .text.libgcc.div:

00000260 <__udivmodhi4>:
 260:	aa 1b       	sub	r26, r26
 262:	bb 1b       	sub	r27, r27
 264:	51 e1       	ldi	r21, 0x11	; 17
 266:	07 c0       	rjmp	.+14     	; 0x276 <__udivmodhi4_ep>

00000268 <__udivmodhi4_loop>:
 268:	aa 1f       	adc	r26, r26
 26a:	bb 1f       	adc	r27, r27
 26c:	a6 17       	cp	r26, r22
 26e:	b7 07       	cpc	r27, r23
 270:	10 f0       	brcs	.+4      	; 0x276 <__udivmodhi4_ep>
 272:	a6 1b       	sub	r26, r22
 274:	b7 0b       	sbc	r27, r23

00000276 <__udivmodhi4_ep>:
 276:	88 1f       	adc	r24, r24
 278:	99 1f       	adc	r25, r25
 27a:	5a 95       	dec	r21
 27c:	a9 f7       	brne	.-22     	; 0x268 <__udivmodhi4_loop>
 27e:	80 95       	com	r24
 280:	90 95       	com	r25
 282:	bc 01       	movw	r22, r24
 284:	cd 01       	movw	r24, r26
 286:	08 95       	ret
